<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>command-line on hack.courses</title>
    <link>/tags/command-line/</link>
    <description>Recent content in command-line on hack.courses</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>hosted by fenrir.pro</copyright>
    <lastBuildDate>Tue, 24 May 2022 17:10:35 +0100</lastBuildDate><atom:link href="/tags/command-line/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Command line 203</title>
      <link>/posts/command_line_201/203/</link>
      <pubDate>Tue, 24 May 2022 17:10:35 +0100</pubDate>
      
      <guid>/posts/command_line_201/203/</guid>
      <description>Data and file manipulation (head, tail, wc, grep, find) Oh, there you are! I was waiting for you to come back from 202!
Now that you&amp;rsquo;re here we&amp;rsquo;re going to talk about new Linux commands you might not know about yet, these commands allow the modification of files and data streams.
 Note : We are not going to discuss file creation or deletion in this class for technical reasons regarding the terminal on hack.</description>
    </item>
    
    <item>
      <title>Command line 201</title>
      <link>/posts/command_line_201/201/</link>
      <pubDate>Sat, 14 May 2022 14:30:35 +0100</pubDate>
      
      <guid>/posts/command_line_201/201/</guid>
      <description>function checkAnswers() { let responses = [ &#34;Question 1 [STATUS] : The answer was /dev/stdin since we need to read user input here.&#34;, &#34;Question 2 [STATUS] : The answer was /dev/stderr, this is the special file reserved for error messages.&#34;, &#34;Question 3 [STATUS] : The answer was /dev/stdout, this is the file that should be used to display information for the users in a terminal.&#34;, ] let questions = document.querySelectorAll(&#39;fieldset&#39;) let answers = [&#39;#res0&#39;,&#39;#res07&#39;,&#39;#res11&#39;] let valid = [false, false, false] let i = 0 for (let question of questions) { let answer = question.</description>
    </item>
    
    <item>
      <title>Command-line 201 course presentation</title>
      <link>/posts/command_line_201/</link>
      <pubDate>Wed, 11 May 2022 09:01:35 +0100</pubDate>
      
      <guid>/posts/command_line_201/</guid>
      <description>Command-line 201 You know how to navigate on a Linux filesystem using command-line and want to know how to use pipes, redirections and more advanced commands?
You&amp;rsquo;ve come to the right place!
This course will teach you everything you need to do basic system administration and management on your Linux machines üñ•Ô∏è.
You won&amp;rsquo;t need to install anything on your computer (for real).
Difficulty : ‚≠ê‚≠ê‚ú∞‚ú∞‚ú∞ (Advanced Beginner)
Syllabus  201 - Inputs/Outputs 202 - Redirections 203 - File interaction (head, tail, wc, grep) 204 - Advanced files interaction (cat++, file, cut, rev [&amp;hellip;]) 205 - Scripts execution  Requirements :</description>
    </item>
    
    <item>
      <title>Command line 101 cheatsheet</title>
      <link>/posts/command_line_101/cheatsheet/</link>
      <pubDate>Wed, 12 Jan 2022 09:04:35 +0100</pubDate>
      
      <guid>/posts/command_line_101/cheatsheet/</guid>
      <description>Command-line CheatSheet  ls -&amp;gt; Print a directory&amp;rsquo;s contents  -l -&amp;gt; Print the contents as a list -a -&amp;gt; Display every file and directory   cat -&amp;gt; Print a file&amp;rsquo;s contents cd -&amp;gt; Move to a different directory pwd -&amp;gt; Prints the directory you&amp;rsquo;re currently in echo -&amp;gt; Print character strings and variables whoami -&amp;gt; Print your username echo $USER Print your username groups -&amp;gt; Print the groups you are part of echo $UID -&amp;gt; Print your user&amp;rsquo;s unique numeric ID  </description>
    </item>
    
    <item>
      <title>Command-line 101 course presentation</title>
      <link>/cli101/</link>
      <pubDate>Wed, 12 Jan 2022 08:01:35 +0100</pubDate>
      
      <guid>/cli101/</guid>
      <description>Command-line 101 This course is a fully interactive and comprehensive class about Linux command-line for beginners.
Do you want to know how to navigate through a filesystem and run programs on Linux using command-line like a pro (Disclaimer: well, an informed beginner at least)? Hop in and grab your best keyboard üòé!
You won&amp;rsquo;t need to install anything on your computer (for real), absolutely no prerequisites except from curiosity.
Contents  Command-line 101 Command-line 102 Command-line 103 Command-line 104 CheatSheet  Start this course  Start the first class   </description>
    </item>
    
    <item>
      <title>Command-line 101 course presentation</title>
      <link>/cli201/</link>
      <pubDate>Wed, 12 Jan 2022 08:01:35 +0100</pubDate>
      
      <guid>/cli201/</guid>
      <description>Command-line 101 This course is a fully interactive and comprehensive class about Linux command-line for beginners who have finished command-line 101!
You know how to navigate on a Linux filesystem using command-line and want to know how to use pipes, redirections and more advanced commands?
You&amp;rsquo;ve come to the right place!
This course will teach you everything you need to do basic system administration and management on your Linux machines üñ•Ô∏è.</description>
    </item>
    
    <item>
      <title>Command-line 101 course presentation</title>
      <link>/posts/command_line_101/</link>
      <pubDate>Wed, 12 Jan 2022 08:01:35 +0100</pubDate>
      
      <guid>/posts/command_line_101/</guid>
      <description>Command-line 101 Difficulty : ‚≠ê‚ú∞‚ú∞‚ú∞‚ú∞ (Beginner)
This course is a fully interactive and comprehensive class about Linux command-line for beginners.
Do you want to know how to navigate through a filesystem and run programs on Linux using command-line like a pro (Disclaimer: well, an informed beginner at least)? Hop in and grab your best keyboard üòé!
You won&amp;rsquo;t need to install anything on your computer (for real), absolutely no prerequisites except from curiosity.</description>
    </item>
    
    <item>
      <title>Command line 104</title>
      <link>/posts/command_line_101/104/</link>
      <pubDate>Wed, 12 Jan 2022 07:00:35 +0100</pubDate>
      
      <guid>/posts/command_line_101/104/</guid>
      <description>function verify(id) {const answers = [&#39;-rw-r-----&#39;,]let input = document.querySelector(&#39;#chall&#39;+id)if (input.value.trim() == answers[id]) {alert(&#39;Congratulations! You finished this challenge&#39;)input.disabled = true;} else {alert(&#39;It seems your answer is invalid. Try again!&#39;)}}Parameters ‚öôÔ∏è Parameters are options you can add to your commands in order to change their behaviour.
For instance, when you type ls -a, &amp;ldquo;-a&amp;rdquo; is a parameter that you add to the command ls.</description>
    </item>
    
    <item>
      <title>Command line 102</title>
      <link>/posts/command_line_101/102/</link>
      <pubDate>Tue, 11 Jan 2022 19:00:35 +0100</pubDate>
      
      <guid>/posts/command_line_101/102/</guid>
      <description>function verify(id) {const answers = [&#39;flag{442fcf28466515a81d5434931496ffa64611cc8e}&#39;,&#39;flag{4a4c6edef220f300dc6bc58df3d3b2e3c0bc8842}&#39;]let input = document.querySelector(&#39;#chall&#39;+id)if (input.value.trim() == answers[id]) {alert(&#39;Congratulations! You finished this challenge&#39;)input.disabled = true;} else {alert(&#39;It seems this flag is invalid. Try again!&#39;)}}Linux filesystem arborescence üå≥ Let me tell you a bit about the way linux filesystems are organized.
/ is where everything starts, it&amp;rsquo;s the root of your filesystem, a little bit like C: is usually where everything is stored on a Windows machine.</description>
    </item>
    
    <item>
      <title>Command line 103</title>
      <link>/posts/command_line_101/103/</link>
      <pubDate>Tue, 11 Jan 2022 19:00:35 +0100</pubDate>
      
      <guid>/posts/command_line_101/103/</guid>
      <description>function verify(id) {const answers = [&#39;flag{333610b9a7955f54efdddea14634ab93d77a0d64}&#39;,&#39;flag{3833de1724aba85be072244d222595c697c29a87}&#39;]let input = document.querySelector(&#39;#chall&#39;+id)if (input.value.trim() == answers[id]) {alert(&#39;Congratulations! You finished this challenge&#39;)input.disabled = true;} else {alert(&#39;It seems this flag is invalid. Try again!&#39;)}}Hidden files üï∂Ô∏è On a linux filesystem, every file and directory whose name starts with a dot . will be hidden.
Such files will not be displayed when using a regular ls.</description>
    </item>
    
    <item>
      <title>Command line 202</title>
      <link>/posts/command_line_201/202/</link>
      <pubDate>Tue, 11 Jan 2022 19:00:35 +0100</pubDate>
      
      <guid>/posts/command_line_201/202/</guid>
      <description>function verify(id) { const answers = [ &#39;flag{b0138935d232349fcea0aede02ab9cdd96938e55}&#39;, ] let input = document.querySelector(&#39;#chall&#39;+id) if (input.value.trim() == answers[id]) { alert(&#39;Congratulations! You finished this challenge&#39;) input.disabled = true; } else { alert(&#39;It seems your answer is invalid. Try again!&#39;) } }  Pipes You might have heard about or have seen pipes using the | character, they are very frequently used in Linux command-line and can become an essential tool once you master them.</description>
    </item>
    
    <item>
      <title>Command line 101</title>
      <link>/posts/command_line_101/101/</link>
      <pubDate>Sun, 09 Jan 2022 19:15:35 +0100</pubDate>
      
      <guid>/posts/command_line_101/101/</guid>
      <description>function verify(id) {const answers = [&#39;flag{29e140ef258fc3ec0e485c0648f048d36ee5e017}&#39;,&#39;flag{1d279c84d51f95a12ea44793212ecc0d5d360d47}&#39;]let input = document.querySelector(&#39;#chall&#39;+id)if (input.value.trim() == answers[id]) {alert(&#39;Congratulations! You finished this challenge&#39;)input.disabled = true;} else {alert(&#39;It seems this flag is invalid. Try again!&#39;)}}Introduction üìñ Welcome to this command-line class!
In this entry level course you will learn how to use a terminal and navigate through a Linux filesystem.
This class is supposed to be followed with hack.</description>
    </item>
    
  </channel>
</rss>
