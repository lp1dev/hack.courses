<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hack.courses</title>
    <link>/</link>
    <description>Recent content on hack.courses</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>hosted by fenrir.pro</copyright>
    <lastBuildDate>Wed, 12 Jan 2022 09:04:35 +0100</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Command line 101 cheatsheet</title>
      <link>/posts/command_line_101/cheatsheet/</link>
      <pubDate>Wed, 12 Jan 2022 09:04:35 +0100</pubDate>
      
      <guid>/posts/command_line_101/cheatsheet/</guid>
      <description>Command-line CheatSheet  ls -&amp;gt; Print a directory&amp;rsquo;s contents  -l -&amp;gt; Print the contents as a list -a -&amp;gt; Display every file and directory   cat -&amp;gt; Print a file&amp;rsquo;s contents cd -&amp;gt; Move to a different directory pwd -&amp;gt; Prints the directory you&amp;rsquo;re currently in echo -&amp;gt; Print character strings and variables whoami -&amp;gt; Print your username echo $USER Print your username groups -&amp;gt; Print the groups you are part of echo $UID -&amp;gt; Print your user&amp;rsquo;s unique numeric ID  </description>
      <content>&lt;h1 id=&#34;command-line-cheatsheet&#34;&gt;Command-line CheatSheet&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ls&lt;/strong&gt; -&amp;gt; Print a directory&amp;rsquo;s contents
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-l&lt;/strong&gt; -&amp;gt; Print the contents as a list&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-a&lt;/strong&gt; -&amp;gt; Display every file and directory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cat&lt;/strong&gt; -&amp;gt; Print a file&amp;rsquo;s contents&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cd&lt;/strong&gt; -&amp;gt; Move to a different directory&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pwd&lt;/strong&gt; -&amp;gt; Prints the directory you&amp;rsquo;re currently in&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;echo&lt;/strong&gt; -&amp;gt; Print character strings and variables&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;whoami&lt;/strong&gt; -&amp;gt; Print your username&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;echo $USER&lt;/strong&gt; Print your username&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;groups&lt;/strong&gt; -&amp;gt; Print the groups you are part of&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;echo $UID&lt;/strong&gt; -&amp;gt; Print your user&amp;rsquo;s unique numeric ID&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Command-line 101 course presentation</title>
      <link>/cli101/</link>
      <pubDate>Wed, 12 Jan 2022 08:01:35 +0100</pubDate>
      
      <guid>/cli101/</guid>
      <description>Command-line 101 This course is a fully interactive and comprehensive class about Linux command-line for beginners.
Do you want to know how to navigate through a filesystem and run programs on Linux using command-line like a pro (Disclaimer: well, an informed beginner at least)? Hop in and grab your best keyboard üòé!
You won&amp;rsquo;t need to install anything on your computer (for real), absolutely no prerequisites except from curiosity.
Contents  Command-line 101 Command-line 102 Command-line 103 Command-line 104 CheatSheet  Start this course  Start the first class   </description>
      <content>&lt;h1 id=&#34;command-line-101&#34;&gt;Command-line 101&lt;/h1&gt;
&lt;p&gt;This course is a fully interactive and comprehensive class about Linux command-line for beginners.&lt;/p&gt;
&lt;p&gt;Do you want to know how to navigate through a filesystem and run programs on Linux using command-line like a pro (Disclaimer: well, an informed beginner at least)? 
Hop in and grab your best keyboard üòé!&lt;/p&gt;
&lt;p&gt;You won&amp;rsquo;t need to install &lt;em&gt;anything&lt;/em&gt; on your computer (for real), absolutely no prerequisites except from curiosity.&lt;/p&gt;
&lt;h1 id=&#34;contents&#34;&gt;Contents&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/posts/command_line_101/101&#34;&gt;Command-line 101&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/posts/command_line_101/102&#34;&gt;Command-line 102&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/posts/command_line_101/103&#34;&gt;Command-line 103&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/posts/command_line_101/104&#34;&gt;Command-line 104&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/posts/command_line_101/cheatsheet&#34;&gt;CheatSheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;start-this-course&#34;&gt;Start this course&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/posts/command_line_101/101&#34;&gt;Start the first class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
</content>
    </item>
    
    <item>
      <title>Command line 104</title>
      <link>/posts/command_line_101/104/</link>
      <pubDate>Wed, 12 Jan 2022 07:00:35 +0100</pubDate>
      
      <guid>/posts/command_line_101/104/</guid>
      <description>function verify(id) {const answers = [&#39;-rw-r-----&#39;,]let input = document.querySelector(&#39;#chall&#39;+id)if (input.value.trim() == answers[id]) {alert(&#39;Congratulations! You finished this challenge&#39;)input.disabled = true;} else {alert(&#39;It seems your answer is invalid. Try again!&#39;)}}Parameters ‚öôÔ∏è Parameters are options you can add to your commands in order to change their behaviour.
For instance, when you type ls -a, &amp;ldquo;-a&amp;rdquo; is a parameter that you add to the command ls.</description>
      <content>&lt;script type=&#34;text/javascript&#34;&gt;
    function verify(id) {
        const answers = [
            &#39;-rw-r-----&#39;,
        ]
        let input = document.querySelector(&#39;#chall&#39;+id)
        if (input.value.trim() == answers[id]) {
            alert(&#39;Congratulations! You finished this challenge&#39;)
            input.disabled = true;
        } else {
            alert(&#39;It seems your answer is invalid. Try again!&#39;)
        }
    }
&lt;/script&gt;
&lt;h1 id=&#34;parameters-&#34;&gt;Parameters ‚öôÔ∏è&lt;/h1&gt;
&lt;p&gt;Parameters are options you can add to your commands in order to change their behaviour.&lt;/p&gt;
&lt;p&gt;For instance, when you type &lt;code&gt;ls -a&lt;/code&gt;,
&amp;ldquo;-a&amp;rdquo; is a parameter that you add to the command &lt;code&gt;ls&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When you type &lt;code&gt;cat challenge_0.txt&lt;/code&gt;, &amp;ldquo;challenge_0.txt&amp;rdquo; is a parameter that you add to the command &lt;code&gt;cat&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can add an infinite number of parameters depending on the ones your script/program supports.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : Anything written &lt;strong&gt;after&lt;/strong&gt; a command is a &lt;em&gt;parameter&lt;/em&gt;. Parameters are separated by a space.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;shortcuts-and-wildcards-&#34;&gt;Shortcuts and wildcards üÉè&lt;/h1&gt;
&lt;h2 id=&#34;history&#34;&gt;History&lt;/h2&gt;
&lt;p&gt;In a Linux shell, you have multiple syntaxes and keyboard shortcuts to avoid typing long commands and doing the same thing twice.&lt;/p&gt;
&lt;p&gt;For instance if you want to run the same command again, &lt;strong&gt;Key Up&lt;/strong&gt; will go through your history and display the last command-lines you entered.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : The command &lt;code&gt;history&lt;/code&gt; will also print the whole command-line history for your shell session.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;autocompletion&#34;&gt;Autocompletion&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Tab&lt;/strong&gt; will &lt;strong&gt;autocomplete&lt;/strong&gt; files and directories names, for instance if you type :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$&amp;gt; ls chall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In your home directory and then press &lt;strong&gt;Tab&lt;/strong&gt;, your terminal will automatically replace &amp;ldquo;chall&amp;rdquo; with &amp;ldquo;challenges&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;In case of ambiguity, your shell will not automatically be able to autocomplete your commands, in that case, &lt;em&gt;nothing will be displayed&lt;/em&gt; when you press &lt;strong&gt;Tab&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Pressing &lt;strong&gt;Tab&lt;/strong&gt; twice in that situation will print the ambiguous file or directory names.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$&amp;gt; ls c &lt;span style=&#34;color:#75715e&#34;&gt;# Press Tab twice and observe what is printed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;wildcards&#34;&gt;Wildcards&lt;/h2&gt;
&lt;p&gt;A wildcard is a &amp;ldquo;magic&amp;rdquo; character that means &lt;em&gt;everything&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In a Linux shell, a wildcard is represented by the &lt;strong&gt;*&lt;/strong&gt; character, if you type it in your shell, it will be replaced before executing your command by every (non-hidden) files and directories in the current directory.&lt;/p&gt;
&lt;p&gt;You can actually test this behaviour in your terminal using the following commands :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$&amp;gt; echo * &lt;span style=&#34;color:#75715e&#34;&gt;# Will print every file and directory name&lt;/span&gt;
$&amp;gt; cat * &lt;span style=&#34;color:#75715e&#34;&gt;# Will cat every file in the local directory&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Wildcards can also be used in conjuction with other characters, at the start or the end of any character string.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$&amp;gt; echo chall*
$&amp;gt; echo *enge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;permissions&#34;&gt;Permissions&lt;/h1&gt;
&lt;p&gt;In a Linux filesystem, every file has associated permissions.&lt;/p&gt;
&lt;p&gt;Permissions define which actions users or groups of users can do regarding those files and directories.&lt;/p&gt;
&lt;h2 id=&#34;users&#34;&gt;Users&lt;/h2&gt;
&lt;p&gt;If you can enter commands on a computer, you are logged in as a &lt;strong&gt;user&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The command &lt;code&gt;whoami&lt;/code&gt; will print your username, this is your identity on the machine.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;$USER&lt;/code&gt; environment variable also contains your username, you can display its value with &lt;code&gt;echo $USER&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Your Linux system does not always uses usernames in order to identify users, each user have a numeric ID called a &lt;strong&gt;UID&lt;/strong&gt;. You can also print your UID using &lt;code&gt;echo $UID&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;groups&#34;&gt;Groups&lt;/h2&gt;
&lt;p&gt;To make permissions management easier, users are divided in &lt;strong&gt;groups&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;By default on Linux, whenever a user is created, it is part of its own, single-member group whose name is its own.&lt;/p&gt;
&lt;p&gt;On &lt;a href=&#34;https://hack.courses&#34;&gt;hack.courses&lt;/a&gt;, your group should be &amp;ldquo;nointernet&amp;rdquo;, you can display the groups you are part of using the command &lt;code&gt;groups&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;read-write-execute&#34;&gt;Read, write, execute&lt;/h2&gt;
&lt;p&gt;Do you remember the &lt;code&gt;ls -l&lt;/code&gt; listing we reviewed earlier? Let&amp;rsquo;s look at it again.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$&amp;gt; ls -l challenges/command_line_101/
total &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;
drwxrwxr-x    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; root     root          &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; 21:59 .
drwxr-xr-x    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; root     root          &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; 21:59 ..
-rw-rw-r--    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root     root            &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt; Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; 21:59 .challenge_4
-rw-rw-r--    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root     root           &lt;span style=&#34;color:#ae81ff&#34;&gt;276&lt;/span&gt; Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; 21:59 challenge5.sh
-rw-rw-r--    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root     root           &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt; Jan  &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; 15:44 challenge_0.txt
-rw-rw-r--    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root     root            &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt; Jan  &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; 20:57 challenge_1.txt
drwxrwxr-x    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; root     root          &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; 21:58 challenge_2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s finally time to explain what all of this means, let&amp;rsquo;s start by investigating in details the first column of this list, the one with characters like &lt;code&gt;-rw-rw-r--&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As I told you earlier, the first character can be either &lt;em&gt;-&lt;/em&gt; (which represents an empty space) or &lt;em&gt;d&lt;/em&gt; for &amp;ldquo;directory&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Then, you have three sequences of &amp;ldquo;rwx&amp;rdquo;, each character of each sequence can also be equal to &lt;em&gt;-&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Those sequences describe the permissions associated to the file or directory :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;r&lt;/strong&gt; - is for &lt;strong&gt;read&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;w&lt;/strong&gt; - is for &lt;strong&gt;write&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;x&lt;/strong&gt; - is for &lt;strong&gt;execute&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Following this logic, &lt;code&gt;r--&lt;/code&gt; means &amp;ldquo;read permissions only&amp;rdquo;, &lt;code&gt;rw-&lt;/code&gt; means &amp;ldquo;read/write permissions only, and &lt;code&gt;rwx&lt;/code&gt; means read+write+execute permissions!&lt;/p&gt;
&lt;p&gt;Why three consecutive sequences then?&lt;/p&gt;
&lt;p&gt;The first sequence is for the &lt;strong&gt;user&lt;/strong&gt; who owns the file/directory, the second one is for the &lt;strong&gt;group&lt;/strong&gt; and the third one is for &lt;strong&gt;everyone else&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Finally, the first username in the list (column 3) is the &lt;strong&gt;user&lt;/strong&gt; who owns the file and the second one is the &lt;strong&gt;group&lt;/strong&gt; the file belongs to!&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;hands-on-&#34;&gt;Hands-on ü§ú!&lt;/h1&gt;
&lt;p&gt;If you&amp;rsquo;re new to this, that might be a lot of information to handle, let&amp;rsquo;s take a break with a few exercices.&lt;/p&gt;
&lt;h2 id=&#34;challenge-6&#34;&gt;Challenge 6&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s do something fun this time, no flag, no answers! There is a pretty neat &lt;strong&gt;executable&lt;/strong&gt; located in ~/examples, its name is &lt;strong&gt;cmatrix&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Find a way to run this executable and then, find a way to exit the Matrix üòé.&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;Hint 1&lt;/summary&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hint&lt;/strong&gt; : You can run an executable exactly like you did with the script previously.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;details&gt;
  &lt;summary&gt;Hint 2&lt;/summary&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hint&lt;/strong&gt; : A shortcut starting with CTRL&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;h2 id=&#34;challenge-7&#34;&gt;Challenge 7&lt;/h2&gt;
&lt;p&gt;For this exercice, let&amp;rsquo;s do something different! This time, you won&amp;rsquo;t have to look for a flag.&lt;/p&gt;
&lt;p&gt;I will give you specific information describing a file which you will have to translate into a &lt;code&gt;drwxr-xr-x&lt;/code&gt; line just like &lt;code&gt;ls -l&lt;/code&gt; would display.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We are talking about a file, not a directory&lt;/li&gt;
&lt;li&gt;The owner of the file can read and write the file&lt;/li&gt;
&lt;li&gt;The group who owns the file can read it&lt;/li&gt;
&lt;li&gt;Anyone else can not do &lt;em&gt;anything&lt;/em&gt; with the file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enter your answer in the prompt below (web version only) :&lt;/p&gt;
&lt;div style=&#34;display:flex&#34;&gt;
    &lt;input style=&#34;width:40rem&#34; type=&#34;text&#34; id=&#34;chall0&#34; placeholder=&#34;Example : drwxrw-rw-&#34;/&gt;&lt;button onclick=&#34;verify(0)&#34;&gt;Verify&lt;/button&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h1 id=&#34;you-finished-this-class&#34;&gt;You finished this class!&lt;/h1&gt;
&lt;p&gt;Congrats on your completion of this first class! I hope you enjoyed it!&lt;/p&gt;
&lt;p&gt;Was it too fast? Too slow? Too hard? Too easy? I&amp;rsquo;d love to &lt;a href=&#34;https://forms.gle/gzvPTPCDv27uwve88&#34;&gt;read your feedback&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;If you want to support my work, you can &lt;a href=&#34;https://lp1.podia.com/free-command-line-and-linux-beginner-class&#34;&gt;get this class&lt;/a&gt; from podia for &lt;strong&gt;free&lt;/strong&gt;, this will help me centralize the students and you will be able to be notified whenever a new class is available!&lt;/p&gt;
&lt;h2 id=&#34;additional-resources&#34;&gt;Additional Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://devhints.io/bash&#34;&gt;https://devhints.io/bash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cheatography.com/davechild/cheat-sheets/linux-command-line/&#34;&gt;https://cheatography.com/davechild/cheat-sheets/linux-command-line/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.guru99.com/linux-commands-cheat-sheet.html&#34;&gt;https://www.guru99.com/linux-commands-cheat-sheet.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- # Additional Resources 


&lt;!-- 

105

# Chown/Chmod 

# grep

# 

--&gt;&lt;blockquote&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>Command line 102</title>
      <link>/posts/command_line_101/102/</link>
      <pubDate>Tue, 11 Jan 2022 19:00:35 +0100</pubDate>
      
      <guid>/posts/command_line_101/102/</guid>
      <description>function verify(id) {const answers = [&#39;flag{442fcf28466515a81d5434931496ffa64611cc8e}&#39;,&#39;flag{4a4c6edef220f300dc6bc58df3d3b2e3c0bc8842}&#39;]let input = document.querySelector(&#39;#chall&#39;+id)if (input.value.trim() == answers[id]) {alert(&#39;Congratulations! You finished this challenge&#39;)input.disabled = true;} else {alert(&#39;It seems this flag is invalid. Try again!&#39;)}}Linux filesystem arborescence üå≥ Let me tell you a bit about the way linux filesystems are organized.
/ is where everything starts, it&amp;rsquo;s the root of your filesystem, a little bit like C: is usually where everything is stored on a Windows machine.</description>
      <content>&lt;script type=&#34;text/javascript&#34;&gt;
    function verify(id) {
        const answers = [
            &#39;flag{442fcf28466515a81d5434931496ffa64611cc8e}&#39;,
            &#39;flag{4a4c6edef220f300dc6bc58df3d3b2e3c0bc8842}&#39;
        ]
        let input = document.querySelector(&#39;#chall&#39;+id)
        if (input.value.trim() == answers[id]) {
            alert(&#39;Congratulations! You finished this challenge&#39;)
            input.disabled = true;
        } else {
            alert(&#39;It seems this flag is invalid. Try again!&#39;)
        }
    }
&lt;/script&gt;
&lt;h1 id=&#34;linux-filesystem-arborescence-&#34;&gt;Linux filesystem arborescence üå≥&lt;/h1&gt;
&lt;p&gt;Let me tell you a bit about the way linux filesystems are organized.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/&lt;/strong&gt; is where everything starts, it&amp;rsquo;s the &lt;em&gt;root&lt;/em&gt; of your filesystem, a little bit like &lt;em&gt;C:&lt;/em&gt; is usually where everything is stored on a Windows machine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/home&lt;/strong&gt; (which is located inside &lt;strong&gt;/&lt;/strong&gt;, that&amp;rsquo;s why it starts with the same character) is where the user&amp;rsquo;s directories are usually stored. It is analogous to the &lt;strong&gt;C:\Users&lt;/strong&gt; directory on Windows.&lt;/p&gt;
&lt;p&gt;Each user has its own &lt;strong&gt;home&lt;/strong&gt; üè† directory, you can see which one is yours using the following command :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$&amp;gt; echo $HOME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In a Linux terminal, the &lt;strong&gt;$&lt;/strong&gt; character designates a variable. The &lt;em&gt;$HOME&lt;/em&gt; variable has been predefined in your terminal by the operating system, such a variable is named an &lt;strong&gt;environment variable&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Observe the difference between your terminal&amp;rsquo;s output when you type :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$&amp;gt; echo $HOME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$&amp;gt; echo HOME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : $HOME can also be replaced with the ~ character.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;manual-pages-&#34;&gt;Manual pages üìö&lt;/h1&gt;
&lt;p&gt;Did you know that Linux comes with manuals for almost every command installed?&lt;/p&gt;
&lt;p&gt;For instance, &lt;code&gt;man ls&lt;/code&gt; will display the manual pages for the command &lt;em&gt;ls&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;You can use your &lt;em&gt;keyboard&amp;rsquo;s arrows&lt;/em&gt; to navigate inside the manpages, the &lt;em&gt;space&lt;/em&gt; key to skip to the next page and &lt;em&gt;q&lt;/em&gt; to quit.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : It&amp;rsquo;s also time to let you know that you can access those classes directly in the terminal using the &lt;code&gt;classes&lt;/code&gt; command! Select a class with your keyboard keys and press enter to open a course&amp;rsquo;s contents. You can navigate through the files exactly like you would with a manual page.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;stopping-a-command-&#34;&gt;Stopping a command üõë&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s say you use the &lt;em&gt;sleep&lt;/em&gt; command and type something like &lt;code&gt;sleep 42&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Your shell is going to wait 42 seconds before allowing you to type new commands, until then, you&amp;rsquo;re stuck!&lt;/p&gt;
&lt;p&gt;If at some point you get stuck in a command-line which blocks the execution of new commands, you can use the &lt;strong&gt;CTRL + C&lt;/strong&gt; shortcut to force the current program to quit.&lt;/p&gt;
&lt;p&gt;Exiting a program in such a way is called &lt;em&gt;killing&lt;/em&gt; a program.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;echo-&#34;&gt;Echo üîâ&lt;/h1&gt;
&lt;p&gt;Echo (which for some unknown reason always reminds me of &lt;a href=&#34;https://en.wikipedia.org/wiki/Ecco_the_Dolphin&#34;&gt;Ecco the Dolphin&lt;/a&gt;) is an incredibly useful Linux command!&lt;/p&gt;
&lt;p&gt;You can use it to display character strings on your screen.&lt;/p&gt;
&lt;p&gt;For instance if you want to print &amp;ldquo;Hello, world&amp;rdquo;, you can type :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$&amp;gt; echo Hello, world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also use it to display a variable&amp;rsquo;s value, for instance :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$&amp;gt; echo Hello, $USER
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;hands-on-&#34;&gt;Hands-on ü§ú!&lt;/h1&gt;
&lt;p&gt;Why don&amp;rsquo;t we challenge your new command-line knowledge?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start with a little treasure hunt.&lt;/p&gt;
&lt;h2 id=&#34;challenge-2&#34;&gt;Challenge 2&lt;/h2&gt;
&lt;p&gt;Enter the &lt;em&gt;challenge_2&lt;/em&gt; directory.&lt;/p&gt;
&lt;p&gt;This directory contains the flag, but where is it?! You&amp;rsquo;ll need to cleverly navigate through multiple directories in order to fetch this challenge&amp;rsquo;s flag.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hint&lt;/strong&gt; : You can go through multiple directories at once, instead of writing &lt;code&gt;cd /gu3st&lt;/code&gt; and &lt;code&gt;cd challenges&lt;/code&gt; you can directly type &lt;code&gt;cd /gu3st/challenges&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div style=&#34;display:flex&#34;&gt;
    &lt;input style=&#34;width:40rem&#34; type=&#34;text&#34; id=&#34;chall0&#34; placeholder=&#34;flag 2&#34;/&gt;&lt;button onclick=&#34;verify(0)&#34;&gt;Verify&lt;/button&gt;
&lt;/div&gt;
&lt;h2 id=&#34;challenge-3&#34;&gt;Challenge 3&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hint&lt;/strong&gt; : Don&amp;rsquo;t forget to type &lt;code&gt;cd&lt;/code&gt; when you&amp;rsquo;re done with an exercice to go back to your home directory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This fourth (counting the challenge 0) flag is not hidden in a file, it is stored in an environment variable!&lt;/p&gt;
&lt;p&gt;The name of the variable is FLAG3.&lt;/p&gt;
&lt;p&gt;Good luck!&lt;/p&gt;
&lt;div style=&#34;display:flex&#34;&gt;
    &lt;input style=&#34;width:40rem&#34; type=&#34;text&#34; id=&#34;chall1&#34; placeholder=&#34;flag 3&#34;/&gt;&lt;button onclick=&#34;verify(1)&#34;&gt;Verify&lt;/button&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hint&lt;/strong&gt; : If you need to find a command quickly you can read the &lt;a href=&#34;../cheatsheet&#34;&gt;cheatsheet&lt;/a&gt; associated with this class.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Wow, you&amp;rsquo;re still there?&lt;/p&gt;
&lt;p&gt;Congrats on making though those first challenges!&lt;/p&gt;
&lt;p&gt;You can now move on to&lt;/p&gt;
&lt;h2 id=&#34;command-line-103103&#34;&gt;&lt;a href=&#34;../103&#34;&gt;Command line 103&lt;/a&gt;&lt;/h2&gt;
</content>
    </item>
    
    <item>
      <title>Command line 103</title>
      <link>/posts/command_line_101/103/</link>
      <pubDate>Tue, 11 Jan 2022 19:00:35 +0100</pubDate>
      
      <guid>/posts/command_line_101/103/</guid>
      <description>function verify(id) {const answers = [&#39;flag{333610b9a7955f54efdddea14634ab93d77a0d64}&#39;,&#39;flag{3833de1724aba85be072244d222595c697c29a87}&#39;]let input = document.querySelector(&#39;#chall&#39;+id)if (input.value.trim() == answers[id]) {alert(&#39;Congratulations! You finished this challenge&#39;)input.disabled = true;} else {alert(&#39;It seems this flag is invalid. Try again!&#39;)}}Hidden files üï∂Ô∏è On a linux filesystem, every file and directory whose name starts with a dot . will be hidden.
Such files will not be displayed when using a regular ls.</description>
      <content>&lt;script type=&#34;text/javascript&#34;&gt;
    function verify(id) {
        const answers = [
            &#39;flag{333610b9a7955f54efdddea14634ab93d77a0d64}&#39;,
            &#39;flag{3833de1724aba85be072244d222595c697c29a87}&#39;
        ]
        let input = document.querySelector(&#39;#chall&#39;+id)
        if (input.value.trim() == answers[id]) {
            alert(&#39;Congratulations! You finished this challenge&#39;)
            input.disabled = true;
        } else {
            alert(&#39;It seems this flag is invalid. Try again!&#39;)
        }
    }
&lt;/script&gt;
&lt;h1 id=&#34;hidden-files-&#34;&gt;Hidden files üï∂Ô∏è&lt;/h1&gt;
&lt;p&gt;On a linux filesystem, every file and directory whose name starts with a dot . will be hidden.&lt;/p&gt;
&lt;p&gt;Such files will &lt;em&gt;not&lt;/em&gt; be displayed when using a regular &lt;code&gt;ls&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can actually see hidden files and directories using &lt;code&gt;ls -a&lt;/code&gt; for &amp;ldquo;all&amp;rdquo; though.&lt;/p&gt;
&lt;p&gt;This command will also display a single dot . which means &amp;ldquo;the current directory&amp;rdquo; in Linux and two dots .. which means &amp;ldquo;the directory above this one in the arborescence&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Observe the difference between :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$&amp;gt; ls .
$&amp;gt; ls -a .
$&amp;gt; ls ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;advanced-ls&#34;&gt;Advanced ls&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;ls&lt;/code&gt; can give you even more useful information about files and directories!&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;ls -l&lt;/code&gt; on the &lt;em&gt;challenges/command_line_101&lt;/em&gt; directory will print the following list :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$&amp;gt; ls -l challenges/command_line_101/
total &lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;
drwxrwxr-x    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; root     root          &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; 21:59 .
drwxr-xr-x    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; root     root          &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; 21:59 ..
-rw-rw-r--    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root     root            &lt;span style=&#34;color:#ae81ff&#34;&gt;96&lt;/span&gt; Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; 21:59 .challenge_4
-rw-rw-r--    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root     root           &lt;span style=&#34;color:#ae81ff&#34;&gt;276&lt;/span&gt; Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; 21:59 challenge5.sh
-rw-rw-r--    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root     root           &lt;span style=&#34;color:#ae81ff&#34;&gt;111&lt;/span&gt; Jan  &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; 15:44 challenge_0.txt
-rw-rw-r--    &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root     root            &lt;span style=&#34;color:#ae81ff&#34;&gt;77&lt;/span&gt; Jan  &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; 20:57 challenge_1.txt
drwxrwxr-x    &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; root     root          &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; Jan &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; 21:58 challenge_2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;re going to leave some of the information printed in this list for another class, but you should already recognize the file and directories names usually displayed by ls!&lt;/p&gt;
&lt;p&gt;The first line &amp;ldquo;total 28&amp;rdquo; means that this directory uses a total of 28 filesystem &amp;ldquo;blocks&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;A block is simply a way of counting space on a Linux filesystem, a bit like the more commonly represented Mega octets and Kilo octets. A block is equivalent to 8KB =&amp;gt; 8000 bytes.&lt;/p&gt;
&lt;p&gt;The hours and dates are the last modification date for each item and the number printed on the left of the month (Jan-&amp;gt;January in this example) is the file&amp;rsquo;s size in bytes.&lt;/p&gt;
&lt;p&gt;Also note, lines starting with &lt;em&gt;d&lt;/em&gt; are directories!&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;executing-scripts-&#34;&gt;Executing scripts üìú&lt;/h1&gt;
&lt;h2 id=&#34;about-scripts&#34;&gt;About scripts&lt;/h2&gt;
&lt;p&gt;What are scripts, you&amp;rsquo;re wondering?&lt;/p&gt;
&lt;p&gt;Scripts are files containing commands and logic which can be used to automatize mostly any task you do on a computer!&lt;/p&gt;
&lt;p&gt;Linux and Operating Systems in general are full of scripts, some of them are used to install softwares, update files, make sure programs are not outdated, update the time, move log files, display alerts etc&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;executing-your-first-script&#34;&gt;Executing your first script&lt;/h2&gt;
&lt;p&gt;In order to run a script, you just need to write its &lt;strong&gt;path&lt;/strong&gt; in your terminal.&lt;/p&gt;
&lt;p&gt;For instance, a script is located in &lt;em&gt;/usr/bin/foxsay&lt;/em&gt; on &lt;a href=&#34;https://hack.courses&#34;&gt;hack.courses&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Type the following command in the terminal to run this script :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/usr/bin/foxsay hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;/foxsay.PNG&#34; alt=&#34;The output should be a fox saying &amp;ldquo;hello&amp;rdquo; in your terminal&#34;&gt;&lt;/p&gt;
&lt;p&gt;Congrats, you just ran your first script!&lt;/p&gt;
&lt;p&gt;Now, this is not the &lt;em&gt;only&lt;/em&gt; way to run a script.&lt;/p&gt;
&lt;p&gt;The path you used here is what is called an &lt;strong&gt;absolute path&lt;/strong&gt;. An absolute path starts from &lt;strong&gt;the root&lt;/strong&gt; of your filesystem (&amp;quot;/&amp;quot;).&lt;/p&gt;
&lt;p&gt;You can also run a script using its &lt;strong&gt;relative path&lt;/strong&gt;, a relative path is, contrary to an &lt;strong&gt;absolute&lt;/strong&gt; path, a path which does not start with &amp;ldquo;/&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;To run a script within the directory you are currently in, type &amp;ldquo;./&amp;rdquo; followed by the script name.&lt;/p&gt;
&lt;p&gt;For instance, move inside the &lt;em&gt;/usr/bin&lt;/em&gt; directory using &lt;code&gt;cd /usr/bin&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, use the following syntax to run the same script again :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./foxsay hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hint&lt;/strong&gt; : Don&amp;rsquo;t forget to type &lt;code&gt;cd&lt;/code&gt; to go back to your home directory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;hands-on-&#34;&gt;Hands-on ü§ú!&lt;/h1&gt;
&lt;p&gt;Ready to take one some harder challenges? Let&amp;rsquo;s go!&lt;/p&gt;
&lt;h1 id=&#34;challenge-4&#34;&gt;Challenge 4&lt;/h1&gt;
&lt;p&gt;The &lt;em&gt;challenges/command_line_101&lt;/em&gt; directory contains a flag for this challenge.&lt;/p&gt;
&lt;p&gt;But beware, it&amp;rsquo;s &lt;em&gt;hidden&lt;/em&gt;!&lt;/p&gt;
&lt;div style=&#34;display:flex&#34;&gt;
    &lt;input style=&#34;width:40rem&#34; type=&#34;text&#34; id=&#34;chall0&#34; placeholder=&#34;flag 4&#34;/&gt;&lt;button onclick=&#34;verify(0)&#34;&gt;Verify&lt;/button&gt;
&lt;/div&gt;
&lt;details&gt;
  &lt;summary&gt;Hint&lt;/summary&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hint&lt;/strong&gt; : Advanced ls&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/details&gt;
&lt;h1 id=&#34;challenge-5&#34;&gt;Challenge 5&lt;/h1&gt;
&lt;p&gt;The flag for this challenge is not hidden, it is in the same directory!&lt;/p&gt;
&lt;p&gt;But this time, it is not a text file that you can &lt;code&gt;cat&lt;/code&gt;, it is a script!&lt;/p&gt;
&lt;p&gt;Run the script to get the flag.&lt;/p&gt;
&lt;div style=&#34;display:flex&#34;&gt;
    &lt;input style=&#34;width:40rem&#34; type=&#34;text&#34; id=&#34;chall1&#34; placeholder=&#34;flag 5&#34;/&gt;&lt;button onclick=&#34;verify(1)&#34;&gt;Verify&lt;/button&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;Ready to continue? Make sure to take a break, drink some water and move on to&lt;/p&gt;
&lt;h2 id=&#34;command-line-104104&#34;&gt;&lt;a href=&#34;../104&#34;&gt;Command line 104&lt;/a&gt;&lt;/h2&gt;
</content>
    </item>
    
    <item>
      <title>About the hack.courses terminal</title>
      <link>/about/</link>
      <pubDate>Sun, 09 Jan 2022 19:15:35 +0100</pubDate>
      
      <guid>/about/</guid>
      <description>What is this terminal? The terminal on hack.courses is a full-fledged GNU/Linux terminal.
It is based on xterm.js and gives access to a real Linux command line interpreter to anyone for free.
If you want to start learning the command line, linux, scripting or programming it is a great way to experiment and learn in real-life conditions without having to install anything on your computer.
If you&amp;rsquo;re new to this, check out the command line 101 class and learn how to use command line right away!</description>
      <content>&lt;h1 id=&#34;what-is-this-terminal&#34;&gt;What is this terminal?&lt;/h1&gt;
&lt;p&gt;The terminal on &lt;a href=&#34;hack.courses&#34;&gt;hack.courses&lt;/a&gt; is a full-fledged GNU/Linux terminal.&lt;/p&gt;
&lt;p&gt;It is based on &lt;a href=&#34;https://xtermjs.org/&#34;&gt;xterm.js&lt;/a&gt; and gives access to a real Linux command line interpreter to anyone for free.&lt;/p&gt;
&lt;p&gt;If you want to start learning the command line, linux, scripting or programming it is a great way to experiment and learn in real-life conditions without having to install anything on your computer.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re new to this, check out the &lt;a href=&#34;/cli101&#34;&gt;command line 101 class&lt;/a&gt; and learn how to use command line right away!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Classes available for free</title>
      <link>/classes/</link>
      <pubDate>Sun, 09 Jan 2022 19:15:35 +0100</pubDate>
      
      <guid>/classes/</guid>
      <description>Available classes  Command line 101 üá¨üáß TypeScript üá´üá∑ Node.js üá´üá∑ Ionic Development üá´üá∑ EcmaScript 6 üá´üá∑ Test-Driven Development 101 üá´üá∑ Vue.js Development w/ TDD üá´üá∑  License All of the class contents on this site use the creative commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0) license.
You can send me a message at jeremie(a)fenrir.pro if you need more details.</description>
      <content>&lt;h1 id=&#34;available-classes&#34;&gt;Available classes&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/posts/command_line_101&#34;&gt;Command line 101&lt;/a&gt; üá¨üáß&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/posts/typescript&#34;&gt;TypeScript&lt;/a&gt; üá´üá∑&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/posts/nodejs&#34;&gt;Node.js&lt;/a&gt; üá´üá∑&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/posts/ionic&#34;&gt;Ionic Development&lt;/a&gt; üá´üá∑&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/posts/es6&#34;&gt;EcmaScript 6&lt;/a&gt; üá´üá∑&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/posts/tdd&#34;&gt;Test-Driven Development 101&lt;/a&gt; üá´üá∑&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/posts/vue_js_tdd&#34;&gt;Vue.js Development w/ TDD&lt;/a&gt; üá´üá∑&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;license&#34;&gt;License&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;All of the class contents on this site&lt;/strong&gt; use the &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;&lt;strong&gt;creative commons&lt;/strong&gt; &lt;em&gt;Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)&lt;/em&gt;&lt;/a&gt; license.&lt;/p&gt;
&lt;p&gt;You can send me a message at jeremie(a)fenrir.pro if you need more details.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Command line 101</title>
      <link>/posts/command_line_101/101/</link>
      <pubDate>Sun, 09 Jan 2022 19:15:35 +0100</pubDate>
      
      <guid>/posts/command_line_101/101/</guid>
      <description>function verify(id) {const answers = [&#39;flag{29e140ef258fc3ec0e485c0648f048d36ee5e017}&#39;,&#39;flag{1d279c84d51f95a12ea44793212ecc0d5d360d47}&#39;]let input = document.querySelector(&#39;#chall&#39;+id)if (input.value.trim() == answers[id]) {alert(&#39;Congratulations! You finished this challenge&#39;)input.disabled = true;} else {alert(&#39;It seems this flag is invalid. Try again!&#39;)}}Introduction üìñ Welcome to this command-line class!
In this entry level course you will learn how to use a terminal and navigate through a Linux filesystem.
This class is supposed to be followed with hack.</description>
      <content>&lt;script type=&#34;text/javascript&#34;&gt;
    function verify(id) {
        const answers = [
            &#39;flag{29e140ef258fc3ec0e485c0648f048d36ee5e017}&#39;,
            &#39;flag{1d279c84d51f95a12ea44793212ecc0d5d360d47}&#39;
        ]
        let input = document.querySelector(&#39;#chall&#39;+id)
        if (input.value.trim() == answers[id]) {
            alert(&#39;Congratulations! You finished this challenge&#39;)
            input.disabled = true;
        } else {
            alert(&#39;It seems this flag is invalid. Try again!&#39;)
        }
    }
&lt;/script&gt;
&lt;h1 id=&#34;introduction-&#34;&gt;Introduction üìñ&lt;/h1&gt;
&lt;p&gt;Welcome to this command-line class!&lt;/p&gt;
&lt;p&gt;In this entry level course you will learn how to use a terminal and navigate through a Linux filesystem.&lt;/p&gt;
&lt;p&gt;This class is supposed to be followed with &lt;a href=&#34;https://hack.courses&#34;&gt;hack.courses&lt;/a&gt; open alongside, the challenges are made to be completed in the website&amp;rsquo;s interactive terminal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/screenshot.png&#34; alt=&#34;Hack.courses terminal&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;whats-command-line-&#34;&gt;What&amp;rsquo;s command-line üíª?&lt;/h1&gt;
&lt;p&gt;A &lt;strong&gt;command&lt;/strong&gt; is an instruction (or a set of instructions) given to a machine.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;command-line&lt;/strong&gt; is (by extension) a textual line containing one or multiple commands destined for a computer.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;command-line interface&lt;/strong&gt; (or CLI) is an interface which is made to be interacted with using &lt;strong&gt;commands-lines&lt;/strong&gt;, contrary to a &lt;strong&gt;graphical user interface&lt;/strong&gt; (or GUI).&lt;/p&gt;
&lt;p&gt;You can type commands in a software called a &lt;strong&gt;command-line interpreter&lt;/strong&gt; (or &lt;em&gt;shell&lt;/em&gt;) for a computer to do specific actions.&lt;/p&gt;
&lt;p&gt;The terminal window on &lt;a href=&#34;hack.courses&#34;&gt;hack.courses&lt;/a&gt; is an example of a command interpreter.&lt;/p&gt;
&lt;p&gt;A command usually looks like this :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$&amp;gt; openfile filename.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : The characters &amp;ldquo;$&amp;gt;&amp;rdquo; here are not part of the command, they represent the prompt usually displayed by shells to let the user know they can type a new command.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;what-are-the-existing-commands&#34;&gt;What are the existing commands?&lt;/h1&gt;
&lt;p&gt;The commands you can possibly type depends on the &lt;strong&gt;command-line interpreter&lt;/strong&gt; you use, and more generally on the &lt;strong&gt;Operating System&lt;/strong&gt; you&amp;rsquo;re working on.&lt;/p&gt;
&lt;p&gt;Windows machines used to understand commands based on &lt;a href=&#34;https://en.wikipedia.org/wiki/DOS&#34;&gt;DOS&lt;/a&gt;, nowadays they also use &lt;a href=&#34;https://fr.wikipedia.org/wiki/Windows_PowerShell&#34;&gt;PowerShell&lt;/a&gt;&amp;rsquo;s syntaxes, Linux and &amp;ldquo;unix-like&amp;rdquo; machines (Ubuntu, MacOS) use commands similar to the &lt;a href=&#34;https://en.wikipedia.org/wiki/Unix_shell&#34;&gt;Unix Shell&lt;/a&gt;, this is the type of commands we&amp;rsquo;re going to cover during this class.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : If you do not understand precisely what Linux, GNU/Linux and Unix are yet, it&amp;rsquo;s okay, it&amp;rsquo;s not mandatory for this course.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;why-do-we-still-use-command-line&#34;&gt;Why do we (still) use command-line?&lt;/h1&gt;
&lt;p&gt;Whatever you can do with a graphical user interface, you can do with command-line, also most of the time command-line is much more efficient and lightweight! But don&amp;rsquo;t take what I tell you for granted, you&amp;rsquo;ll soon be able to try it for yourself.&lt;/p&gt;
&lt;p&gt;Also, commands can be chained and logic can be added, which allows the automation of an almost infinity of tasks!&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;hands-on-&#34;&gt;Hands-on ü§ú!&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s start working on your first commands with a small challenge!&lt;/p&gt;
&lt;p&gt;To finish this first challenge, you will have to find the &lt;em&gt;flag&lt;/em&gt; corresponding to this exercice.&lt;/p&gt;
&lt;p&gt;A flag is a character string following this format :&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flag{f572d396fae9206628714fb2ce00f72e94f2258f}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once you found it you can copy/paste it (by right-clicking and selecting &amp;ldquo;copy&amp;rdquo; in your browser) in the text field below in order to verify that you have successfully completed the challenge.&lt;/p&gt;
&lt;h2 id=&#34;challenge-0&#34;&gt;Challenge 0&lt;/h2&gt;
&lt;p&gt;Type the following commands in your shell, one after the other.&lt;/p&gt;
&lt;p&gt;Press Enter after each command. If you typed them correctly, the flag will be given to you.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ls
cd challenges
cd command_line_101
cat challenge_0.txt
cd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&#34;display:flex&#34;&gt;
    &lt;input style=&#34;width:40rem&#34; type=&#34;text&#34; id=&#34;chall0&#34; placeholder=&#34;flag 0&#34;/&gt;&lt;button onclick=&#34;verify(0)&#34;&gt;Verify&lt;/button&gt;
&lt;/div&gt;
&lt;p&gt;Now that you entered your first commands, let&amp;rsquo;s details the things you just did.&lt;/p&gt;
&lt;h1 id=&#34;ls&#34;&gt;Ls&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;ls&lt;/strong&gt; is the command you will use to list a directory&amp;rsquo;s contents, it displays the files and directories in the location you are at on your computer.&lt;/p&gt;
&lt;p&gt;In the terminal on hack.courses, filenames are printed in &lt;strong&gt;green&lt;/strong&gt;, directories names in &lt;strong&gt;blue&lt;/strong&gt;.&lt;/p&gt;
&lt;h1 id=&#34;cd&#34;&gt;Cd&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;cd&lt;/strong&gt; is the command you will use to change the directory you are currently in.&lt;/p&gt;
&lt;p&gt;Typing &lt;code&gt;$&amp;gt; cd challenges&lt;/code&gt; did make you move to the &lt;em&gt;challenges&lt;/em&gt; directory for instance.&lt;/p&gt;
&lt;p&gt;Typing &lt;code&gt;$&amp;gt; cd&lt;/code&gt; without parameter will make you go back to your user&amp;rsquo;s personal directory.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : &lt;strong&gt;cd&lt;/strong&gt; -&amp;gt; &lt;strong&gt;c&lt;/strong&gt;hange &lt;strong&gt;d&lt;/strong&gt;irectory&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;pwd&#34;&gt;Pwd&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;pwd&lt;/strong&gt; prints the directory you are currently in.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : &lt;strong&gt;pwd&lt;/strong&gt; -&amp;gt; &lt;strong&gt;p&lt;/strong&gt;rint &lt;strong&gt;w&lt;/strong&gt;orking &lt;strong&gt;d&lt;/strong&gt;irectory&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;cat-&#34;&gt;Cat üê±&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;cat&lt;/strong&gt; displays a file&amp;rsquo;s contents, any kind of file, it&amp;rsquo;s going to print what&amp;rsquo;s inside on your screen.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : Do not forget to specify the name of the file you want to open after typing &lt;code&gt;cat&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;challenge-1&#34;&gt;Challenge 1&lt;/h2&gt;
&lt;p&gt;For this next challenge, you&amp;rsquo;re on your own!&lt;/p&gt;
&lt;p&gt;The flag you are looking for is in a file located in the &lt;em&gt;command_line_101&lt;/em&gt; directory within the &lt;em&gt;challenges&lt;/em&gt; directory.&lt;/p&gt;
&lt;p&gt;What you need to do here is :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go inside the challenges directory&lt;/li&gt;
&lt;li&gt;Go inside the command_line_101 directory&lt;/li&gt;
&lt;li&gt;List the contents of this directory&lt;/li&gt;
&lt;li&gt;Open the file you think might contain the flag for the first challenge&lt;/li&gt;
&lt;li&gt;Go back to your home directory (Hint : &lt;code&gt;$&amp;gt; cd&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;div style=&#34;display:flex&#34;&gt;
    &lt;input style=&#34;width:40rem&#34; type=&#34;text&#34; id=&#34;chall1&#34; placeholder=&#34;flag 1&#34;/&gt;&lt;button onclick=&#34;verify(1)&#34;&gt;Verify&lt;/button&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hint&lt;/strong&gt; : If you need to find a command quickly you can read the &lt;a href=&#34;../cheatsheet&#34;&gt;cheatsheet&lt;/a&gt; associated with this class.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Congrats on making it through this first command-line class!&lt;/p&gt;
&lt;p&gt;You can now move on to&lt;/p&gt;
&lt;h2 id=&#34;command_line_102102&#34;&gt;&lt;a href=&#34;../102&#34;&gt;command_line_102&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;whenever you feel like it.&lt;/p&gt;
&lt;p&gt;I hope I&amp;rsquo;ll see you soon üòä!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Licensing</title>
      <link>/license/</link>
      <pubDate>Sun, 09 Jan 2022 19:15:35 +0100</pubDate>
      
      <guid>/license/</guid>
      <description>Project&amp;rsquo;s license The project is not open source at the moment, it might evolve, but all of the content is owned by Jeremie Amsellem. You can contact me at jeremie(a)fenrir.pro if you need more information.
Courses license All of the class contents on this site use the creative commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0) license.
You can send me a message at jeremie(a)fenrir.pro if you need more details.
Open source licenses Open sources licenses involved with this project :</description>
      <content>&lt;h1 id=&#34;projects-license&#34;&gt;Project&amp;rsquo;s license&lt;/h1&gt;
&lt;p&gt;The project is not open source at the moment, it might evolve, but all of the content is owned by Jeremie Amsellem. You can contact me at jeremie(a)fenrir.pro if you need more information.&lt;/p&gt;
&lt;h1 id=&#34;courses-license&#34;&gt;Courses license&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;All of the class contents on this site&lt;/strong&gt; use the &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;&lt;strong&gt;creative commons&lt;/strong&gt; &lt;em&gt;Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)&lt;/em&gt;&lt;/a&gt; license.&lt;/p&gt;
&lt;p&gt;You can send me a message at jeremie(a)fenrir.pro if you need more details.&lt;/p&gt;
&lt;h1 id=&#34;open-source-licenses&#34;&gt;Open source licenses&lt;/h1&gt;
&lt;p&gt;Open sources licenses involved with this project :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xtermjs/xterm.js/blob/master/LICENSE&#34;&gt;xterm.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pexels.com/fr-fr/photo/silhouette-de-montagnes-1323550/&#34;&gt;The wallpaper &amp;ldquo;silouhette de montagnes&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://icones8.fr/license&#34;&gt;The icons used on the website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/RaytingSec/foxsay&#34;&gt;Foxsay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/glow/master/LICENSE&#34;&gt;glow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Cours Typescript</title>
      <link>/posts/typescript/</link>
      <pubDate>Mon, 16 Nov 2020 13:58:54 +0100</pubDate>
      
      <guid>/posts/typescript/</guid>
      <description>TypeScript ¬†Jeremie Amsellem &amp;lt; classes@lp1.eu &amp;gt;
 Sommaire  Qu‚Äôest-ce que TypeScript ? Les sp√©cifit√©s de TypeScript  Les annotations de type Les types primitifs Les tableaux Les interfaces Les classes Les modificateurs d‚Äôacc√®s Les generics Les Enum     Qu&amp;rsquo;est-ce que TypeScript ? TypeScript est un langage Libre (sous licence GNU/GPL) sorti en 2012
 D√©velopp√© par Microsoft Orient√© Objet Transcompil√© (ou &amp;ldquo;transpil√©&amp;rdquo;) en JavaScript avec l&amp;rsquo;aide de babel Accompagn√© d‚Äôun IDE : Visual Studio Code Utilis√© par le framework Angular depuis Angular 2   Les annotations de type TypeScript est un langage plus fortement typ√© que JavaScript.</description>
      <content>&lt;h1 id=&#34;typescript&#34;&gt;TypeScript&lt;/h1&gt;
&lt;p&gt;¬†
¬†
¬†
¬†
¬†&lt;/p&gt;
&lt;p&gt;Jeremie Amsellem &amp;lt; &lt;a href=&#34;mailto:classes@lp1.eu&#34;&gt;classes@lp1.eu&lt;/a&gt; &amp;gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;sommaire&#34;&gt;Sommaire&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Qu‚Äôest-ce que TypeScript ?&lt;/li&gt;
&lt;li&gt;Les sp√©cifit√©s de TypeScript
&lt;ul&gt;
&lt;li&gt;Les annotations de type&lt;/li&gt;
&lt;li&gt;Les types primitifs&lt;/li&gt;
&lt;li&gt;Les tableaux&lt;/li&gt;
&lt;li&gt;Les interfaces&lt;/li&gt;
&lt;li&gt;Les classes&lt;/li&gt;
&lt;li&gt;Les modificateurs d‚Äôacc√®s&lt;/li&gt;
&lt;li&gt;Les generics&lt;/li&gt;
&lt;li&gt;Les Enum&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;quest-ce-que-typescript-&#34;&gt;Qu&amp;rsquo;est-ce que TypeScript ?&lt;/h1&gt;
&lt;p&gt;TypeScript est un langage Libre (sous licence GNU/GPL) sorti en 2012&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;D√©velopp√© par Microsoft&lt;/li&gt;
&lt;li&gt;Orient√© Objet&lt;/li&gt;
&lt;li&gt;Transcompil√© (ou &amp;ldquo;transpil√©&amp;rdquo;) en JavaScript avec l&amp;rsquo;aide de babel&lt;/li&gt;
&lt;li&gt;Accompagn√© d‚Äôun IDE : Visual Studio Code&lt;/li&gt;
&lt;li&gt;Utilis√© par le framework Angular depuis Angular 2&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;les-annotations-de-type&#34;&gt;Les annotations de type&lt;/h1&gt;
&lt;p&gt;TypeScript est un langage plus fortement typ√© que JavaScript. 
Il est possible de sp√©cifier pour nos param√®tres de fonctions, valeurs de retour et variables des types, par exemple :
¬†&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;myVar&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;123&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;square&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;param&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;param&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;param&lt;/span&gt;; 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;les-types-primitifs&#34;&gt;Les types primitifs&lt;/h1&gt;
&lt;p&gt;TypeScript comprend 5 types primitifs :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Les nombres (number)&lt;/li&gt;
&lt;li&gt;Les cha√Ænes de caract√®res (string)&lt;/li&gt;
&lt;li&gt;Les bool√©ens (boolean)&lt;/li&gt;
&lt;li&gt;void&lt;/li&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;li&gt;undefined&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;num&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;str&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;les-tableaux&#34;&gt;Les tableaux&lt;/h1&gt;
&lt;p&gt;Ils sont similaires aux tableaux en JavaScript, √† la diff√©rence qu‚Äôils peuvent √™tre √©galement sujets aux annotations de type&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numberArray&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;[];
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numberArray&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Array&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;number&lt;/span&gt;&amp;gt;;

&lt;span style=&#34;color:#a6e22e&#34;&gt;numberArray&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;//OK
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;numberArray&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;//KO
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;les-interfaces&#34;&gt;Les interfaces&lt;/h1&gt;
&lt;p&gt;Les interfaces permettent de d√©finir la structure d&amp;rsquo;un objet, cette structure est plus ou moins stricte et doit √™tre respect√©e par tous les tiers l&amp;rsquo;impl√©mentant.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;children?&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Object&lt;/span&gt;[];
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;person&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Person&lt;/span&gt;;

&lt;span style=&#34;color:#a6e22e&#34;&gt;person&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;John&amp;#39;&lt;/span&gt;,
    	&lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;25&amp;#39;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;les-classes&#34;&gt;Les classes&lt;/h1&gt;
&lt;p&gt;Les classes de TypeScript sont globalement similaires √† celles d&amp;rsquo;ES6. En revanche TypeScript permet de d√©finir des propri√©t√©s en dehors du constructeur d&amp;rsquo;une classe :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Point&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;;
    	&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;;
        
        &lt;span style=&#34;color:#66d9ef&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;) {
        	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;;
            	&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;y&lt;/span&gt;;
        }
    
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;les-modificateurs-dacc√®s&#34;&gt;Les modificateurs d&amp;rsquo;acc√®s&lt;/h1&gt;
&lt;p&gt;TypeScript permet √©galement d&amp;rsquo;ajouter des modificateurs d&amp;rsquo;acc√®s sur les propri√©t√©s de nos classes :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;public&lt;/li&gt;
&lt;li&gt;private&lt;/li&gt;
&lt;li&gt;protected&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nickname&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;les-generics&#34;&gt;Les generics&lt;/h1&gt;
&lt;p&gt;Tout comme certains autres langages haut-niveau il est possible de d√©finir des generics relatifs aux types de donn√©es utilis√©es dans une fonction :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;T&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt; {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; parseInt(&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; parseInt(&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;);
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;string&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 3;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;number&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 3;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;les-enum&#34;&gt;Les Enum&lt;/h1&gt;
&lt;p&gt;Autre nouveaut√© appr√©ciable en comparaison avec JavaScript, nous pouvons ici d√©finir des enum :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fd&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;STDIN&lt;/span&gt;,
	&lt;span style=&#34;color:#a6e22e&#34;&gt;STDOUT&lt;/span&gt;,
    	&lt;span style=&#34;color:#a6e22e&#34;&gt;STDERR&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;returnCodes&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;ERROR&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    	&lt;span style=&#34;color:#a6e22e&#34;&gt;OK&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;tds&#34;&gt;TDs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/lp1dev/hack.courses/tree/master/static/directory/Programming/TypeScript/TDs&#34;&gt;Exercices TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Le Test-Driven Development (TDD)</title>
      <link>/posts/tdd/</link>
      <pubDate>Mon, 16 Nov 2020 13:57:34 +0100</pubDate>
      
      <guid>/posts/tdd/</guid>
      <description>Le Test Driven Development et les Tests Unitaires J√©remie A. &amp;lt; lp1.eu &amp;gt;
 Le principe de base du TDD Le TDD (Test Driven Development) est une mani√®re de d√©velopper des logiciels qui met les tests (notamment unitaires) en priorit√© par rapport aux premi√®re phases d&amp;rsquo;√©criture de code.
On √©crit d&amp;rsquo;abord les tests et ensuite on commen√ße √† coder les fonctionnalit√©s correspondantes.
 Les √©tapes du TDD  √âcrire un test Lancer le test (v√©rifier qu&amp;rsquo;il √©choue) √âcrire le code n√©cessaire pour que le test passe Optimiser le code √©crit   Les Tests Unitaires Un test unitaire c&amp;rsquo;est quoi?</description>
      <content>&lt;h1 id=&#34;le-test-driven-development-et-les-tests-unitaires&#34;&gt;Le Test Driven Development et les Tests Unitaires&lt;/h1&gt;
&lt;p&gt;J√©remie A. &amp;lt; lp1.eu &amp;gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;le-principe-de-base-du-tdd&#34;&gt;Le principe de base du TDD&lt;/h1&gt;
&lt;p&gt;Le &lt;strong&gt;TDD&lt;/strong&gt; (Test Driven Development) est une mani√®re de d√©velopper des logiciels qui met &lt;strong&gt;les tests&lt;/strong&gt; (notamment unitaires) &lt;strong&gt;en priorit√©&lt;/strong&gt; par rapport aux premi√®re phases d&amp;rsquo;√©criture de code.&lt;/p&gt;
&lt;p&gt;On √©crit d&amp;rsquo;abord les tests et &lt;strong&gt;ensuite&lt;/strong&gt; on commen√ße √† coder les fonctionnalit√©s correspondantes.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;les-√©tapes-du-tdd&#34;&gt;Les √©tapes du TDD&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;√âcrire un test&lt;/li&gt;
&lt;li&gt;Lancer le test (v√©rifier qu&amp;rsquo;il √©choue)&lt;/li&gt;
&lt;li&gt;√âcrire le code n√©cessaire pour que le test passe&lt;/li&gt;
&lt;li&gt;Optimiser le code √©crit&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;les-tests-unitaires&#34;&gt;Les Tests Unitaires&lt;/h1&gt;
&lt;h2 id=&#34;un-test-unitaire-cest-quoi&#34;&gt;Un test unitaire c&amp;rsquo;est quoi?&lt;/h2&gt;
&lt;p&gt;Un &lt;strong&gt;test unitaire&lt;/strong&gt; a pour but (comme son nom l&amp;rsquo;indique) de &lt;strong&gt;tester une &amp;ldquo;unit√©&amp;rdquo; d&amp;rsquo;un programme&lt;/strong&gt;.
Ce qu&amp;rsquo;on appelle une &amp;ldquo;unit√©&amp;rdquo; dans un programme peut √™tre une &lt;strong&gt;m√©thode, une fonction, une classe, m√™me quelque lignes seulement&lt;/strong&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;Si l&#39;&amp;ldquo;unit√©&amp;rdquo; qui doit √™tre test√©e dans un test unitaire n&amp;rsquo;est pas n√©cessairement d√©finie et que le concept est relatif, le but d&amp;rsquo;un test unitaire est quand √† lui assez pr√©cis !&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;√†-quoi-√ßa-sert-&#34;&gt;√Ä quoi √ßa sert ?&lt;/h1&gt;
&lt;p&gt;Le but d&amp;rsquo;un test unitaire est de tester, que pour un comportement &lt;strong&gt;A&lt;/strong&gt; (une variable, un √©v√®nement), l&amp;rsquo;unit√©e de code test√©e ait un comportement &lt;strong&gt;B&lt;/strong&gt; strictement d√©fini.&lt;/p&gt;
&lt;p&gt;L&amp;rsquo;avantage est de pouvoir s&amp;rsquo;assurer √† chacune des √©tapes du d√©veloppement que les fonctionnalit√©s du projet sont conformes √† la mani√®re dont elles ont √©t√© archit√©ctur√©es et √©galement de pouvoir √©viter et rep√©rer de nombreuses r√©gressions dans le code !&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;exemple&#34;&gt;Exemple&lt;/h1&gt;
&lt;p&gt;Prenons le cas d&amp;rsquo;une fonction &lt;strong&gt;checkPassword&lt;/strong&gt; qui servirait √† valider le mot de passe d&amp;rsquo;un utilisateur.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;checkPassword&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) {
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Elle doit renvoyer une erreur dans ces conditions :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Le mot de passe fait moins de 8 caract√®res&lt;/li&gt;
&lt;li&gt;Le mot de passe est un mot du dictionnaire&lt;/li&gt;
&lt;li&gt;Le mot de passe ne comporte que des chiffres&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nous pourrions √©crire les tests de la mani√®re suivante :&lt;/p&gt;
&lt;hr&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;describe&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;checkPassword&amp;#39;&lt;/span&gt;, () &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;// We start by checking the first rule 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;it&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shouldn&amp;#39;t allow passwords shorter than 8 chars&amp;#34;&lt;/span&gt;, () &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
    	&lt;span style=&#34;color:#a6e22e&#34;&gt;expect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;checkPassword&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test1&amp;#34;&lt;/span&gt;)).&lt;span style=&#34;color:#a6e22e&#34;&gt;toThrow&lt;/span&gt;();
    });
    &lt;span style=&#34;color:#75715e&#34;&gt;// Then the second one 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;it&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shouldn&amp;#39;t allow words from the dictionary&amp;#34;&lt;/span&gt;, () &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
    	&lt;span style=&#34;color:#a6e22e&#34;&gt;expect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;checkPassword&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aerodynamic&amp;#34;&lt;/span&gt;)).&lt;span style=&#34;color:#a6e22e&#34;&gt;toThrow&lt;/span&gt;();
    });
    &lt;span style=&#34;color:#75715e&#34;&gt;// And finally the third one
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;it&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shouldn&amp;#39;t allow only numeric passwords&amp;#34;&lt;/span&gt;, () &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
    	&lt;span style=&#34;color:#a6e22e&#34;&gt;expect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;checkPassword&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8008135707&amp;#34;&lt;/span&gt;)).&lt;span style=&#34;color:#a6e22e&#34;&gt;toThrow&lt;/span&gt;();
    });
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Cours Node.js</title>
      <link>/posts/nodejs/</link>
      <pubDate>Mon, 16 Nov 2020 13:55:32 +0100</pubDate>
      
      <guid>/posts/nodejs/</guid>
      <description>Cours Node.js Jour1 ¬† Vous n&amp;rsquo;avez pas les bases (pour le moment)
 ¬†J√©r√©mie Amsellem &amp;lt;lp1.eu&amp;gt;
 Sommaire du cours  Node.js c&amp;rsquo;est quoi ? Node.js et JavaScript Pourquoi utiliser Node.js plut√¥t que du PHP/Python/Ruby[&amp;hellip;] ? Comment √ßa marche ? Comment on ecrit du Node.js ?   Node.js c&amp;rsquo;est quoi ? Est-ce un framework, une biblioth√®que, un serveur ? Rien de tout √ßa, Node.js est un environnement d&amp;rsquo;√©xecution (runtime) qui permet de lancer du JavaScript sur de nombreux environnements en dehors d&amp;rsquo;un navigateur.</description>
      <content>&lt;h1 id=&#34;cours-nodejs&#34;&gt;Cours Node.js&lt;/h1&gt;
&lt;h2 id=&#34;jour1&#34;&gt;Jour1&lt;/h2&gt;
&lt;p&gt;¬†
¬†&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Vous n&amp;rsquo;avez pas les bases (pour le moment)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;¬†
¬†
¬†
¬†
¬†J√©r√©mie Amsellem &amp;lt;lp1.eu&amp;gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;sommaire-du-cours&#34;&gt;Sommaire du cours&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Node.js c&amp;rsquo;est quoi ?&lt;/li&gt;
&lt;li&gt;Node.js et JavaScript&lt;/li&gt;
&lt;li&gt;Pourquoi utiliser Node.js plut√¥t que du PHP/Python/Ruby[&amp;hellip;] ?&lt;/li&gt;
&lt;li&gt;Comment √ßa marche ?&lt;/li&gt;
&lt;li&gt;Comment on ecrit du Node.js ?&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;nodejs-cest-quoi-&#34;&gt;Node.js c&amp;rsquo;est quoi ?&lt;/h1&gt;
&lt;h3 id=&#34;est-ce-un-framework-une-biblioth√®que-un-serveur-&#34;&gt;Est-ce un framework, une biblioth√®que, un serveur ?&lt;/h3&gt;
&lt;p&gt;Rien de tout √ßa, Node.js est un environnement d&amp;rsquo;√©xecution (runtime) qui permet de lancer du JavaScript sur de nombreux environnements en dehors d&amp;rsquo;un navigateur.&lt;/p&gt;
&lt;p&gt;Il est vastement utilis√© pour la communication r√©seau (notamment pour cr√©er des API HTTP avec Express.js) mais peut servir pour toutes sortes d&amp;rsquo;op√©rations, m√™me plus bas-niveau.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;nodejs-et-javascript&#34;&gt;Node.js et JavaScript&lt;/h1&gt;
&lt;p&gt;Node.js est √©crit sur une base de &lt;strong&gt;C++&lt;/strong&gt;, il utilise le moteur JavaScript &lt;strong&gt;V8&lt;/strong&gt; (cr√©e par &lt;strong&gt;Google&lt;/strong&gt; originellement pour &lt;strong&gt;Chrome&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;Il supporte les syntaxes d&#39;&lt;strong&gt;ECMAScript&lt;/strong&gt; jusqu&amp;rsquo;√† &lt;strong&gt;ES8&lt;/strong&gt; !&lt;/p&gt;
&lt;p&gt;Il &lt;strong&gt;incorpore&lt;/strong&gt; et est bas√© sur les paradigmes de programmation √©v√®nementielle (&lt;strong&gt;Event Driven Programming&lt;/strong&gt;) de JavaScript.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;pourquoi-nodejs-plut√¥t-quautre-chose-&#34;&gt;Pourquoi Node.js plut√¥t qu&amp;rsquo;autre chose ?&lt;/h1&gt;
&lt;p&gt;¬†&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Performances&lt;/li&gt;
&lt;li&gt;Gestion asynchrone des √©v√®nements sans multi-threading&lt;/li&gt;
&lt;li&gt;Un seul langage pour un front et un back-end&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;les-performances&#34;&gt;Les performances&lt;/h2&gt;
&lt;p&gt;Node est particuli√®rement int√©ressant en terme de performances si on le compare √† PHP, Python et Java (entre autres). 
C&amp;rsquo;est largement d√ª √† la rapidit√© d&amp;rsquo;execution de V8 !&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Par exemple&lt;/strong&gt;, &lt;a href=&#34;https://medium.com/@mihaigeorge.c/web-rest-api-benchmark-on-a-real-life-application-ebb743a5d7a3&#34;&gt;un benchmark r√©alis√© sur plusieurs architectures&lt;/a&gt; pour un simple Hello World (en nombre de requ√™tes g√©r√©es par seconde).&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/800/1*XGTOfo9taLfePZvL3-FZhg.png&#34; alt=&#34;perfs-node&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;gestion-asynchrone-des-√©v√®nements-sans-multi-threading&#34;&gt;Gestion asynchrone des √©v√®nements sans multi-threading&lt;/h2&gt;
&lt;p&gt;La gestion d&amp;rsquo;√©v√®nements asynchrones est un paradigme inh√©rent au langage JavaScript. C&amp;rsquo;est ce comportement qui permet √† Node.js de g√©rer &lt;strong&gt;plusieurs requ√™tes, en m√™me temps&lt;/strong&gt; sans avoir √† cr√©er des threads enfants en plus du thread principal !&lt;/p&gt;
&lt;p&gt;Sur de nombreuses architectures de &lt;strong&gt;CPU&lt;/strong&gt; c&amp;rsquo;est un gain de performance certain.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;un-langage-unifi√©-pour-le-front-et-le-back-end&#34;&gt;Un langage unifi√© pour le front et le back-end&lt;/h2&gt;
&lt;p&gt;Finalement, le fait d&amp;rsquo;avoir un seul et unique langage n√©cessaire au d√©veloppement de votre front-end et de votre back-end est un avantage certain pour le co√ªt de d√©veloppement et le partage de sch√©mas de donn√©s dans votre stack technique.&lt;/p&gt;
&lt;p&gt;Par exemple la logique de v√©rfication des donn√©es d&amp;rsquo;un objet JavaScript contenant des informations utilisateur&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;comment-√ßa-marche-&#34;&gt;Comment √ßa marche ?&lt;/h1&gt;
&lt;p&gt;√Ä la mani√®re d&amp;rsquo;un runtime Python, Ruby, Perl [&amp;hellip;] une fois Node.js install√© vous disposez du binaire &lt;strong&gt;node&lt;/strong&gt; qui vous permet d&amp;rsquo;√©xecuter des fichier &lt;strong&gt;.js&lt;/strong&gt; en lan√ßant la commande&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;$&amp;gt; node monfichier.js&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Tous les fichiers &lt;strong&gt;JavaScript&lt;/strong&gt; sont support√©s, mais il est en revanche possible que certaines fonctionnalit√©s et syntaxes propres √† l&amp;rsquo;environnement d&amp;rsquo;un navigateur ne soient pas utilisables.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Par exemple il est impossible d&amp;rsquo;acc√©der √† &lt;strong&gt;window&lt;/strong&gt;, car dans le contexte de Node.js il n&amp;rsquo;y a pas de fen√™tre de navigateur !&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;comment-on-ecrit-du-nodejs-&#34;&gt;Comment on ecrit du Node.js ?&lt;/h1&gt;
&lt;p&gt;Attaquons-nous maintenant aux principales diff√©rences entre les syntaxes &lt;strong&gt;Node.js&lt;/strong&gt; et le &lt;strong&gt;JavaScript orient√© navigateur&lt;/strong&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Les imports&lt;/li&gt;
&lt;li&gt;NPM&lt;/li&gt;
&lt;li&gt;Les API navigateur&lt;/li&gt;
&lt;li&gt;Process&lt;/li&gt;
&lt;li&gt;Quelques modules Node.js
&lt;ul&gt;
&lt;li&gt;fs&lt;/li&gt;
&lt;li&gt;express&lt;/li&gt;
&lt;li&gt;Les WebSockets&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; : Ce contenu a √©t√© test√© en prenant un environnement Node.js 8.11 en r√©f√©rence, il est possible qu&amp;rsquo;il y ait quelques diff√©rences avec les derni√®res versions&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;les-imports&#34;&gt;Les imports&lt;/h2&gt;
&lt;p&gt;Vous vous souvenez peut-√™tre du syst√®me d&amp;rsquo;imports impl√©ment√© en ES6, avec des syntaxes du type :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export Object
import Object from &#39;./file&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;En Node.js, un syst√®me d&amp;rsquo;import est pr√©sent depuis sa cr√©ation et impl√©mente sa propre gestion des modules utilisant &lt;strong&gt;module.export&lt;/strong&gt; et &lt;strong&gt;require&lt;/strong&gt; :&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Par exemple :&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;fichier-hellojs-&#34;&gt;Fichier hello.js :&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;module.exports = &#39;hello&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;fichier-mainjs-&#34;&gt;Fichier main.js :&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;const hello = require(&#39;./hello&#39;); console.log(hello) #prints &#39;hello&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;node-package-manager-npm&#34;&gt;Node Package Manager (NPM)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;NPM&lt;/strong&gt; est le gestionnaire de modules int√©gr√© √† Node.js.&lt;/p&gt;
&lt;p&gt;Il en existe d&amp;rsquo;autres (yarn ou bower par exemple), mais &lt;strong&gt;npm&lt;/strong&gt; est de loin le plus utilis√© actuellement  car il est packag√© avec les installeurs Node.js.&lt;/p&gt;
&lt;p&gt;On utilise la syntaxe &lt;code&gt;npm install {nom du module}&lt;/code&gt; pour installer un module Node.js.&lt;/p&gt;
&lt;p&gt;La commande &lt;code&gt;npm init&lt;/code&gt; dans un dossier permet d&amp;rsquo;initialiser un nouveau projet Node.js. 
Un fichier &lt;strong&gt;package.json&lt;/strong&gt; contenant diverses informations sur le projet (d√©pendances, d√©pot, auteur, licence) est alors cr√©e.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;packagejson&#34;&gt;package.json&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;npm&lt;/strong&gt; se sert du fichier &lt;strong&gt;package.json&lt;/strong&gt; pour stocker les informations relatives au projet courant.&lt;/p&gt;
&lt;p&gt;Lorsqu&amp;rsquo;un module npm est ajout√© aux d√©pendances de votre projet (&lt;code&gt;npm install --save {nom du module}&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;il sera ajout√© dans le champ &amp;ldquo;dependencies&amp;rdquo; de votre fichier &lt;strong&gt;package.json&lt;/strong&gt;. 
Les fichiers du module seront par d√©faut install√©s dans le dossier &lt;em&gt;node_modules&lt;/em&gt; du projet.&lt;/p&gt;
&lt;p&gt;Pour installer automatiquement toutes les d√©pendances d&amp;rsquo;un projet Node.js il suffit d&amp;rsquo;utiliser &lt;code&gt;npm install&lt;/code&gt; sans param√®tres.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.npmjs.com/files/package.json&#34;&gt;la documentation NPM&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;les-api-navigateur&#34;&gt;Les API navigateur&lt;/h2&gt;
&lt;p&gt;¬†
√áa peut √™tre quelque peu d√©routant mais en Node.js vous ne pourrez pas acc√©der √† &lt;strong&gt;window, navigator, document&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;C&amp;rsquo;est en soit logique, ce sont des API pr√©sentes et utiles dans le contexte d&amp;rsquo;utilisation d&amp;rsquo;un &lt;strong&gt;navigateur web&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Dans le cas de Node.js, le code est ex√©cut√© en &amp;ldquo;standalone&amp;rdquo;, il n&amp;rsquo;est &lt;strong&gt;pas li√© √† un navigateur&lt;/strong&gt; mais &lt;strong&gt;directement ex√©cut√© sur votre machine&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;process&#34;&gt;Process&lt;/h2&gt;
&lt;p&gt;Process est une globale dans le contexte de Node. 
Elle contient des informations et des m√©thodes utilitaires concernant le processus courant !&lt;/p&gt;
&lt;p&gt;Vous pouvez l&amp;rsquo;utiliser directement sans import dans votre script Node.js.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Par exemple&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const firstArgument = process.argv[1] # affiche le premier argument pass√© au script
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Plus d&amp;rsquo;infos sur &lt;a href=&#34;https://nodejs.org/api/process.html#process_process&#34;&gt;la documentation Node.js&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;le-module-fs&#34;&gt;Le module fs&lt;/h2&gt;
&lt;p&gt;Le module Node &lt;strong&gt;fs&lt;/strong&gt; permet d&amp;rsquo;int√©ragir avec le syst√®me de fichiers de votre machine.&lt;/p&gt;
&lt;p&gt;Il permet (entre autres) de &lt;strong&gt;cr√©er, lire, √©crire, supprimer, renommer&lt;/strong&gt; des fichiers.&lt;/p&gt;
&lt;p&gt;La majorit√© de ses m√©thodes sont utilisables de mani√®re &lt;strong&gt;synchrone et asynchrone&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Par exemple pour lire le contenu d&amp;rsquo;un fichier de mani√®re asynchrone:&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const fs = require(&#39;fs&#39;)
fs.readFile(&#39;/etc/passwd&#39;, (err, data) =&amp;gt; {
  if (err) throw err;
  console.log(data);
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Plus d&amp;rsquo;informations sur &lt;a href=&#34;https://nodejs.org/api/fs.html&#34;&gt;la documentation Node.js&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;expressjs&#34;&gt;Express.js&lt;/h2&gt;
&lt;p&gt;¬†
Express est un des modules Node.js les plus connus. 
C&amp;rsquo;est un framework web, souvent utilis√© pour cr√©er des back-ends, notamment dans des stacks &lt;strong&gt;MEAN&lt;/strong&gt; (&lt;strong&gt;M&lt;/strong&gt;ongoDB &lt;strong&gt;E&lt;/strong&gt;xpress &lt;strong&gt;A&lt;/strong&gt;ngular &lt;strong&gt;N&lt;/strong&gt;ode.js).&lt;/p&gt;
&lt;p&gt;Il s&amp;rsquo;inspire du micro-framework web &lt;strong&gt;Sinatra&lt;/strong&gt; (Ruby) dans sa simplicit√© d&amp;rsquo;utilisation.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const express = require(&#39;express&#39;);
const app = express();

const server = app.listen(8000, () =&amp;gt; {
    const host = server.address().address;
    const port = server.address().port;
    console.log(&amp;quot;HTTP Server listening on &amp;quot;, host, port);
});
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;les-websockets&#34;&gt;Les WebSockets&lt;/h2&gt;
&lt;p&gt;¬†
Les WebSockets, vous en avez probablement entendu parler, possiblement m√™me utilis√©es.&lt;/p&gt;
&lt;p&gt;Une WebSocket c&amp;rsquo;est (&lt;em&gt;en gros&lt;/em&gt;) un hack de HTTP/2 permettant de cr√©er des objets ayant le m√™me comportement que des sockets UNIX.&lt;/p&gt;
&lt;p&gt;Il existe plusieurs modules Node.js impl√©mentant des WebSockets c√¥t√© serveur ou client, notamment &lt;strong&gt;ws&lt;/strong&gt; et &lt;strong&gt;websocket&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Pour plus d&amp;rsquo;informations : &lt;a href=&#34;https://developer.mozilla.org/fr/docs/WebSockets&#34;&gt;la documentation MDN&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;axios&#34;&gt;Axios&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Axios&lt;/strong&gt; est un module quelque peu moins populaire que ceux que nous avons cit√©s jusqu&amp;rsquo;ici mais il saura se montrer tr√®s utile pour la suite de ce cours (et probablement dans vos autres projets de d√©veloppement en JavaScript) !&lt;/p&gt;
&lt;p&gt;C&amp;rsquo;est un wrapper autour des &lt;strong&gt;API de communication HTTP&lt;/strong&gt; de Node.js et des navigateurs.&lt;/p&gt;
&lt;p&gt;Il permet de grandement simplifier les requ√™tes HTTP.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Par exemple&lt;/em&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const axios = require(&#39;axios&#39;);
axios.get(&#39;https://hack.courses&#39;)
   .then(response =&amp;gt; console.log(response))
   .catch(error =&amp;gt; console.error(error))

&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;tds&#34;&gt;TDs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/lp1dev/hack.courses/tree/master/static/directory/Programming/Node_Angular/TDs_node&#34;&gt;Exercices Node.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;projet&#34;&gt;Projet&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/lp1dev/hack.courses/tree/master/static/directory/Programming/Node_Angular/project&#34;&gt;Projet Node.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Formation Ionic</title>
      <link>/posts/ionic/</link>
      <pubDate>Mon, 16 Nov 2020 13:49:10 +0100</pubDate>
      
      <guid>/posts/ionic/</guid>
      <description>Slides  Slides Formation Ionic 4 Jours (Google Drive) Slides Formation Ionic 4 Jours (PDF)  </description>
      <content>&lt;h1 id=&#34;slides&#34;&gt;Slides&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1n_Oz5TEEG3RvSU5gHnfN47qtq0zUr9YzlVXupWiRpRE&#34;&gt;Slides Formation Ionic 4 Jours (Google Drive)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lp1dev/hack.courses/master/static/directory/Programming/Ionic/Slides%20Formation%20Ionic.pdf&#34;&gt;Slides Formation Ionic 4 Jours (PDF)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Programmation : EcmaScript6</title>
      <link>/posts/es6/</link>
      <pubDate>Mon, 16 Nov 2020 13:47:16 +0100</pubDate>
      
      <guid>/posts/es6/</guid>
      <description>Partie I - De ES5 √† ES6, qu&amp;rsquo;est-ce qui a chang√©? ¬†J√©r√©mie Amsellem - cours@lp1.eu
 Sommaire  I - Qu&amp;rsquo;est-ce qu&amp;rsquo;ES6? II - let et const III - Les fonctions fl√™ch√©e IV - Les templates V - Les Sets VI - Les Maps VII - Les promesses VIII - For&amp;hellip;in et for&amp;hellip;of IX - M√©thodes des cha√Ænes de caract√®res X - M√©thodes des tableaux XI - Default XII - Rest et Spread XIII - get et set   I - Premi√®rement, qu&amp;rsquo;est-ce qu&amp;rsquo;ES6?</description>
      <content>&lt;h1 id=&#34;partie-i---de-es5-√†-es6-quest-ce-qui-a-chang√©&#34;&gt;Partie I - De ES5 √† ES6, qu&amp;rsquo;est-ce qui a chang√©?&lt;/h1&gt;
&lt;p&gt;¬†
¬†
¬†
¬†
J√©r√©mie Amsellem - &lt;a href=&#34;mailto:cours@lp1.eu&#34;&gt;cours@lp1.eu&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;sommaire&#34;&gt;Sommaire&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;I - Qu&amp;rsquo;est-ce qu&amp;rsquo;ES6?&lt;/li&gt;
&lt;li&gt;II - let et const&lt;/li&gt;
&lt;li&gt;III - Les fonctions fl√™ch√©e&lt;/li&gt;
&lt;li&gt;IV - Les templates&lt;/li&gt;
&lt;li&gt;V - Les Sets&lt;/li&gt;
&lt;li&gt;VI - Les Maps&lt;/li&gt;
&lt;li&gt;VII - Les promesses&lt;/li&gt;
&lt;li&gt;VIII - For&amp;hellip;in et for&amp;hellip;of&lt;/li&gt;
&lt;li&gt;IX - M√©thodes des cha√Ænes de caract√®res&lt;/li&gt;
&lt;li&gt;X - M√©thodes des tableaux&lt;/li&gt;
&lt;li&gt;XI - Default&lt;/li&gt;
&lt;li&gt;XII - Rest et Spread&lt;/li&gt;
&lt;li&gt;XIII - get et set&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;i---premi√®rement-quest-ce-ques6&#34;&gt;I - Premi√®rement, qu&amp;rsquo;est-ce qu&amp;rsquo;ES6?&lt;/h1&gt;
&lt;p&gt;Pour rappel, ECMAScript est la sp√©cification de langage utilis√©e (entre autres) par le langage JavaScript.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ES6&lt;/strong&gt;, ou &lt;strong&gt;ECMAScript 6&lt;/strong&gt; (aussi appel√© &lt;strong&gt;ECMAScript 2015&lt;/strong&gt;) est la version d&amp;rsquo;ECMAScript actuellement utilis√©e par les derni√®res versions de Node.js, Firefox et Google Chrome.&lt;/p&gt;
&lt;p&gt;Cette nouvelle version apporte beaucoup de nouveaut√©s concernant les paradigmes d&amp;rsquo;ECMAScript emprunt√©s de la POO et de la programmation fonctionnelle, notamment la possibilit√© de cr√©er des classes en JavaScript !&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;ii---les-mots-cl√©s-let-et-const&#34;&gt;II - Les mots cl√©s let et const&lt;/h1&gt;
&lt;p&gt;ES6 Introduit deux nouveaux mots-cl√©s permettant de d√©finir des variables et des constantes : &lt;strong&gt;let&lt;/strong&gt; et &lt;strong&gt;const&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;let&lt;/strong&gt; vise √† remplacer var par une alternative plus &amp;ldquo;s√ªre&amp;rdquo; pour les d√©veloppeurs et √©vitant les d√©bordements involontaires dans des scopes parents.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;const&lt;/strong&gt; permet de d√©finir des constantes, ce qui √©tait auparavant impossible dans le langage.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;iii---les-fonctions-fl√™ch√©es&#34;&gt;III - Les fonctions fl√™ch√©es&lt;/h1&gt;
&lt;p&gt;Seconde fonctionnalit√© primordiale : 
la possibilit√© de d√©finir des &amp;ldquo;arrow functions&amp;rdquo; 
(aussi appel√©es lambdas dans d&amp;rsquo;autres langages).&lt;/p&gt;
&lt;p&gt;Cela permet de prototyper des fonctions beaucoup plus courtes qu&amp;rsquo;avec la syntaxe habituelle :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function(params) {
  /* logique */
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Les syntaxes existantes sont les suivantes :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(params) =&amp;gt; {/* logique */}
param =&amp;gt; {/* logique */}
param =&amp;gt; /* logique */
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&#34;iv---les-cha√Ænes-templat√©es&#34;&gt;IV - Les cha√Ænes &amp;ldquo;templat√©es&amp;rdquo;&lt;/h1&gt;
&lt;p&gt;On peut d√©sormais utiliser des templates dans des cha√Ænes de caract√®res pour interpoler (remplacer dynamiquement) des variables dans du texte.&lt;/p&gt;
&lt;p&gt;Pour d√©finir une cha√Æne de caract√®res contenant des templates, il suffit d&amp;rsquo;utiliser des backquotes au lieux des simples et doubles quotes habituels.&lt;/p&gt;
&lt;p&gt;On utilisera ensuite la syntaxe ${expression} pour indiquer le contenu √† remplacer par une expression JavaScript.&lt;/p&gt;
&lt;p&gt;Par exemple :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;`Today&#39;s the ${new Date().toLocaleString()}`
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&#34;v---les-sets&#34;&gt;V - Les Sets&lt;/h1&gt;
&lt;p&gt;Des nouvelles structures de donn√©es ont √©galement fait leur apparition dans ES6, notamment les tr√®s utiles Sets et Maps.&lt;/p&gt;
&lt;p&gt;Un &lt;strong&gt;Set&lt;/strong&gt; permet de stocker de valeurs &lt;strong&gt;uniques&lt;/strong&gt; de tous les types.&lt;/p&gt;
&lt;p&gt;Par exemple :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;()
&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;({})
&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;has&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* true */&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;delete&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;has&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* false */&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* 3 */&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;clear&lt;/span&gt;() &lt;span style=&#34;color:#75715e&#34;&gt;/* Vide le Set */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;vi---les-maps&#34;&gt;VI - Les Maps&lt;/h1&gt;
&lt;p&gt;Les &lt;strong&gt;Maps&lt;/strong&gt; permettent de stocker des variables en cl√©/valeur (comme un objet JavaScript classique en somme).&lt;/p&gt;
&lt;p&gt;En revanche, celles-ci peuvent utiliser n&amp;rsquo;importe quel type d&amp;rsquo;objet comme cl√©.&lt;/p&gt;
&lt;p&gt;√âgalement, il est tr√®s simple d&amp;rsquo;obtenir la taille d&amp;rsquo;une Map, en utilisant l&amp;rsquo;attribut Map.size, contrairement aux objets JavaScript.&lt;/p&gt;
&lt;p&gt;Exemple :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Map&lt;/span&gt;()
&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;obj&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* true */&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;has&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* true */&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;delete&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* 1 */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;vii---les-promesses-ou-promises&#34;&gt;VII - Les promesses (ou promises)&lt;/h1&gt;
&lt;p&gt;Les promesses sont une mani√®re plus explicite et claire de d√©finir un comportement asynchrone.&lt;/p&gt;
&lt;p&gt;Une promesse est un objet √† usage unique, c&amp;rsquo;est une portion de code qui sera ex√©cut√©e de mani√®re asynchrone et renverra dans un laps de temps ind√©termin√© des informations √† la fin de cette ex√©cution.&lt;/p&gt;
&lt;p&gt;On d√©finit une promesse en instanciant un nouvel objet Promise et en y ajoutant notre comportement.&lt;/p&gt;
&lt;p&gt;Une fois notre promesse d√©finie, on peut la d√©clencher en appelant ses m√©thodes then et catch.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;viii---forin&#34;&gt;VIII - For&amp;hellip;in&lt;/h1&gt;
&lt;p&gt;Deux nouveaux mot-cl√©s permettant d&amp;rsquo;it√©rer plus facilement sur des tableaux et des objets ont √©galement √©t√© ajout√©s.&lt;/p&gt;
&lt;p&gt;Ce sont les mots-cl√©s &lt;strong&gt;for &amp;hellip;in&lt;/strong&gt; et &lt;strong&gt;for &amp;hellip;of&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for &amp;hellip; in permet d&amp;rsquo;it√©rer sur les cl√©s d&amp;rsquo;un objet JavaScript :&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;key1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;key2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;}) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// key1, key2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;for &amp;hellip; of permet d&amp;rsquo;it√©rer sur les √©l√©ments d&amp;rsquo;un tableau :&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;For&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;item&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 3, 2, 1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;ix---nouvelles-m√©thodes-de-la-classe-string&#34;&gt;IX - Nouvelles m√©thodes de la classe String&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;String.includes&lt;/strong&gt; : Retourne true si la cha√Æne pass√©e en param√®tre de includes est contenue dans la String&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;String.repeat(n)&lt;/strong&gt; : Retourne la cha√Æne r√©p√©t√©e n fois&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;String.startsWith&lt;/strong&gt; : Retourne true si la String commence par la cha√Æne pass√©e en param√®tre&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;String.endsWith&lt;/strong&gt; : Retourne true si la String termine par la cha√Æne pass√©e en parametre&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;x---nouvelles-m√©thodes-des-tableaux&#34;&gt;X - Nouvelles m√©thodes des tableaux&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Array.forEach&lt;/strong&gt; : Permet d&amp;rsquo;it√©rer sur chacun des √©l√©ments d&amp;rsquo;un tableau&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Array.filter&lt;/strong&gt; : Permet de filtrer un tableau JavaScript&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Array.map&lt;/strong&gt; : Permet de transformer les valeurs d&amp;rsquo;un tableau&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Array.reduce&lt;/strong&gt; : Permet de r√©duire un tableau √† un seul nombre&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Array.find&lt;/strong&gt; : Permet de trouver une valeur dans un tableau (et non son index)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Array.findIndex&lt;/strong&gt; : Permet de trouver l&amp;rsquo;index d&amp;rsquo;un √©l√©ment dans un tableau&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;xi---default&#34;&gt;XI - Default&lt;/h1&gt;
&lt;p&gt;Comme dans de nombreux autres langages, il est possible de d√©finir des param√®tres par d√©faut dans une fonction dans le cas o√π ceux-ci ne seraient pas remplis.&lt;/p&gt;
&lt;h5 id=&#34;par-exemple-&#34;&gt;Par exemple :&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createUser&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;France&amp;#34;&lt;/span&gt;) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; / &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Attention, les param√®tres par d√©faut sont toujours les derniers param√®tres d&amp;rsquo;une fonction !&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;xii---rest-et-spread&#34;&gt;XII - Rest et Spread&lt;/h1&gt;
&lt;p&gt;Rest permet de stocker des param√®tres en nombre ind√©fini dans un tableau et ce sans utiliser le mot cl√© arguments de JavaScript.&lt;/p&gt;
&lt;h5 id=&#34;par-exemple&#34;&gt;Par exemple&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;, ...&lt;span style=&#34;color:#a6e22e&#34;&gt;extra&lt;/span&gt;) {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;extra&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// Affiche tout ce qui est pass√© en plus de name et age
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Spread, quand √† lui permet d&amp;rsquo;utiliser un tableau en tant que param√®tres pour une fonction.&lt;/p&gt;
&lt;h5 id=&#34;par-exemple--1&#34;&gt;Par exemple :&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;array&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TestMan&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Paris&amp;#39;&lt;/span&gt;]
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createUser&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;firstName&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;lastName&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;) {
}
&lt;span style=&#34;color:#a6e22e&#34;&gt;createUser&lt;/span&gt;(...&lt;span style=&#34;color:#a6e22e&#34;&gt;array&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// √âquivaut √† createUser(array[0], array[1], array[2])
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;xiii---get-et-set&#34;&gt;XIII - Get et set&lt;/h1&gt;
&lt;p&gt;Autre nouvelle possibilit√©, cette fois-ci concernant les objets JavaScript, on peut d√©sormais d√©finir simplement nos propres setters et getters sur des attributs :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const obj = {
  get size() {
    //calcul de la taille de l&#39;objet
  }
}
obj.size // Recalcul√© dynamiquement et gard√© en m√©moire
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&#34;partie-ii---es6&#34;&gt;Partie II - ES6++&lt;/h1&gt;
&lt;p&gt;¬†
¬†
¬†
¬†&lt;/p&gt;
&lt;p&gt;J√©remie Amsellem &amp;lt;lp1.eu&amp;gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;i---la-d√©structuration&#34;&gt;I - La d√©structuration&lt;/h1&gt;
&lt;p&gt;Il est possible, d&amp;rsquo;assigner d&amp;rsquo;un seul coup plusieurs variables √† partir de valeurs d&amp;rsquo;un tableau ou d&amp;rsquo;un objet.&lt;/p&gt;
&lt;p&gt;On appelle cette op√©ration de la d√©structuration.&lt;/p&gt;
&lt;p&gt;La syntaxe est la suivante avec un tableau :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; [&lt;span style=&#34;color:#a6e22e&#34;&gt;firstName&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;lastName&lt;/span&gt;, , &lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TestMan&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Paris, France&amp;#39;&lt;/span&gt; ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Et avec un objet :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;firstName&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;lastName&lt;/span&gt;} &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;firstName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;lastName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;TestMan&amp;#39;&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;// firstName == &amp;#39;Bob&amp;#39; &amp;amp;&amp;amp; lastName == &amp;#39;TestMan&amp;#39;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;ii---les-classes&#34;&gt;II - Les Classes&lt;/h1&gt;
&lt;p&gt;Une des plus grandes nouveaut√©s d&amp;rsquo;ES6 est la possibilit√© d&amp;rsquo;instancier des Classes dans le langage.&lt;/p&gt;
&lt;p&gt;On utilise le mot-cl√© class pour en cr√©er une nouvelle :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Person {
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ainsi que le mot-cl√© new pour l&amp;rsquo;instancier&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const p = new Person()
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h2 id=&#34;les-classes-es6---le-constructeur&#34;&gt;Les Classes ES6 - Le constructeur&lt;/h2&gt;
&lt;p&gt;Pour modifier le constructeur de notre classe pour y ajouter de la logique ou des param√®tres on utilise le nom de m√©thode &lt;strong&gt;constructor&lt;/strong&gt; :&lt;/p&gt;
&lt;p&gt;¬†&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;¬†
Notez que le mot-cl√© &lt;em&gt;this&lt;/em&gt; s&amp;rsquo;utilise comme dans n&amp;rsquo;importe quel autre langage en ES6.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;les-classes-es6---les-m√©thodes-et-variables-de-classe&#34;&gt;Les Classes ES6 - Les m√©thodes et variables de classe&lt;/h2&gt;
&lt;p&gt;On ne d√©finit pas de variables de classe dans le corps de notre classe.&lt;/p&gt;
&lt;p&gt;Elles sont d√©finies dans le constructeur en utilisant la syntaxe :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;
  }
  &lt;span style=&#34;color:#a6e22e&#34;&gt;getBirthYear&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;De plus, l&amp;rsquo;ajout de m√©thodes se fait sans les s√©parer par une virgule dans une classe JavaScript !&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;les-classes-es6---get-et-set&#34;&gt;Les Classes ES6 - get et set&lt;/h2&gt;
&lt;p&gt;On peut √©galement d√©finir des get et set dans des classes ES6, par exemple :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;
  }
  &lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;birthYear&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2019&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;
  }
  &lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newName&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newName&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toUpperCase&lt;/span&gt;()
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;person&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;person&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Robert&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;birthYear&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* 1977 */&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;/* ROBERT */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;les-classes-es6---lh√©ritage&#34;&gt;Les Classes ES6 - L&amp;rsquo;h√©ritage&lt;/h2&gt;
&lt;p&gt;En ES6 il n&amp;rsquo;y a pas d&amp;rsquo;h√©ritage multiple, on h√©rite d&amp;rsquo;une seule classe parente.&lt;/p&gt;
&lt;p&gt;La syntaxe pour l&amp;rsquo;h√©ritage est la m√™me que dans beaucoup d&amp;rsquo;autres langages, on utilise le mot cl√© &amp;lsquo;extends&amp;rsquo; suivi du nom de la classe parente :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dev&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt; {
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dev&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dev&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;les-classes-es6---super&#34;&gt;Les Classes ES6 - Super&lt;/h2&gt;
&lt;p&gt;Lorsqu&amp;rsquo;on h√©rite d&amp;rsquo;une classe il est possible d&amp;rsquo;appeler dans la m√©thode d&amp;rsquo;une classe fille, 
la m√©thode correspondant dans la classe parent.&lt;/p&gt;
&lt;p&gt;Pour ce faire on utilise le mot-cl√© &lt;strong&gt;super&lt;/strong&gt; :&lt;/p&gt;
&lt;h3 id=&#34;par-exemple--2&#34;&gt;Par exemple :&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;
  }
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Dev&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Person&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;language&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;language&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;language&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;tds&#34;&gt;TDs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/lp1dev/hack.courses/tree/master/static/directory/Programming/JS/TDs&#34;&gt;Exercices JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Formation Vue.JS &#43; TDD</title>
      <link>/posts/vue_js_tdd/</link>
      <pubDate>Mon, 16 Nov 2020 13:19:38 +0100</pubDate>
      
      <guid>/posts/vue_js_tdd/</guid>
      <description>Formation Vue.JS 
R√©aliser un projet Vue.JS en TDD  
Auteur: J√©r√©mie Amsellem // Consultant S√©curit√© Offensive
https://hack.courses/Programming/Vue.JS 
 Le principe de base du TDD Le TDD (Test Driven Development) est une mani√®re de d√©velopper des logiciels qui met les tests (notamment unitaires) en priorit√© par rapport aux premi√®res phases d&amp;rsquo;√©criture de code.
On √©crit d&amp;rsquo;abord les tests et ensuite on commen√ße √† coder les fonctionnalit√©s correspondantes.
Dans une logique m√©tier, en architecturant votre projet vous commen√ßerez par d√©gager des besoins auquel il doit r√©pondre.</description>
      <content>&lt;h1 id=&#34;formation-vuejs&#34;&gt;Formation Vue.JS&lt;/h1&gt;
&lt;!--![Logo Vue.js](https://vuejs.org/images/logo.png) --&gt;
&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h2 id=&#34;r√©aliser-un-projet-vuejs-en-tdd&#34;&gt;R√©aliser un projet Vue.JS en TDD&lt;/h2&gt;
&lt;p&gt;&lt;br/&gt;&lt;br/&gt;
&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Auteur: &lt;strong&gt;J√©r√©mie Amsellem&lt;/strong&gt; // Consultant S√©curit√© Offensive&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://hack.courses/Programming/Vue.JS&#34;&gt;&lt;code&gt;https://hack.courses/Programming/Vue.JS&lt;/code&gt; &lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;le-principe-de-base-du-tdd&#34;&gt;Le principe de base du TDD&lt;/h1&gt;
&lt;p&gt;Le &lt;strong&gt;TDD&lt;/strong&gt; (Test Driven Development) est une mani√®re de d√©velopper des logiciels qui met &lt;strong&gt;les tests&lt;/strong&gt; (notamment unitaires) &lt;strong&gt;en priorit√©&lt;/strong&gt; par rapport aux premi√®res phases d&amp;rsquo;√©criture de code.&lt;/p&gt;
&lt;p&gt;On √©crit d&amp;rsquo;abord les tests et &lt;strong&gt;ensuite&lt;/strong&gt; on commen√ße √† coder les fonctionnalit√©s correspondantes.&lt;/p&gt;
&lt;p&gt;Dans une logique m√©tier, en architecturant votre projet vous commen√ßerez par d√©gager des &lt;strong&gt;besoins&lt;/strong&gt; auquel il doit r√©pondre.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Besoins&lt;/strong&gt; qui deviendront des &lt;strong&gt;sp√©cifications&lt;/strong&gt;, et ces &lt;strong&gt;sp√©cifications&lt;/strong&gt; seront pr√™tes √† √™tre √©nonc√©e sous forme de &lt;strong&gt;tests&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;les-√©tapes-du-tdd&#34;&gt;Les √©tapes du TDD&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1&lt;/strong&gt; - √âcrire un test&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2&lt;/strong&gt; - Lancer le test (v√©rifier qu&amp;rsquo;il √©choue)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3&lt;/strong&gt; - √âcrire le code n√©cessaire pour que le test passe&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;4&lt;/strong&gt; - Optimiser le code √©crit&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;les-tests-unitaires&#34;&gt;Les Tests Unitaires&lt;/h1&gt;
&lt;h2 id=&#34;un-test-unitaire-cest-quoi&#34;&gt;Un test unitaire c&amp;rsquo;est quoi?&lt;/h2&gt;
&lt;p&gt;Un &lt;strong&gt;test unitaire&lt;/strong&gt; a pour but (comme son nom l&amp;rsquo;indique) de &lt;strong&gt;tester une &amp;ldquo;unit√©&amp;rdquo; d&amp;rsquo;un programme&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Ce qu&amp;rsquo;on appelle une &amp;ldquo;unit√©&amp;rdquo; dans un programme peut √™tre une &lt;strong&gt;m√©thode, une fonction, une classe, m√™me quelque lignes seulement&lt;/strong&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;Si l&#39;&amp;ldquo;unit√©&amp;rdquo; qui doit √™tre test√©e dans un test unitaire n&amp;rsquo;est pas n√©cessairement d√©finie et que le concept est relatif, le but d&amp;rsquo;un test unitaire est quand √† lui assez pr√©cis !&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;√†-quoi-√ßa-sert-&#34;&gt;√Ä quoi √ßa sert ?&lt;/h1&gt;
&lt;p&gt;Le but d&amp;rsquo;un test unitaire est de tester, que pour un param√®tre &lt;strong&gt;A&lt;/strong&gt; (le param√®tre d&amp;rsquo;une fonction, une variable, un √©v√®nement), l&amp;rsquo;unit√© de code test√©e ait le comportement &lt;strong&gt;B&lt;/strong&gt; attendu.&lt;/p&gt;
&lt;p&gt;L&amp;rsquo;avantage est de pouvoir s&amp;rsquo;assurer √† chacune des √©tapes du d√©veloppement que les fonctionnalit√©s du projet sont conformes √† la mani√®re dont elles ont √©t√© archit√©ctur√©es et √©galement de pouvoir √©viter et rep√©rer de nombreuses r√©gressions dans le code !&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;exemple&#34;&gt;Exemple&lt;/h1&gt;
&lt;p&gt;Prenons le cas d&amp;rsquo;une fonction &lt;strong&gt;checkPassword&lt;/strong&gt; qui servirait √† valider le mot de passe d&amp;rsquo;un utilisateur.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;checkPassword&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;) {
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Elle doit lever une exception dans ces conditions :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Le mot de passe fait moins de 8 caract√®res&lt;/li&gt;
&lt;li&gt;Le mot de passe est un mot du dictionnaire&lt;/li&gt;
&lt;li&gt;Le mot de passe ne comporte que des chiffres&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Si le mot de passe respecte ces r√®gles, checkPassword devra alors retourner &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Nous pourrions √©crire les tests de la mani√®re suivante :&lt;/p&gt;
&lt;hr&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;describe&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;checkPassword&amp;#39;&lt;/span&gt;, () =&amp;gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;// We start by checking the first rule 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;it&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shouldn&amp;#39;t allow passwords shorter than 8 chars&amp;#34;&lt;/span&gt;, () =&amp;gt; {
    	&lt;span style=&#34;color:#a6e22e&#34;&gt;expect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;checkPassword&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test1&amp;#34;&lt;/span&gt;)).&lt;span style=&#34;color:#a6e22e&#34;&gt;toThrow&lt;/span&gt;();
    });
    &lt;span style=&#34;color:#75715e&#34;&gt;// Then the second one 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;it&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shouldn&amp;#39;t allow words from the dictionary&amp;#34;&lt;/span&gt;, () =&amp;gt; {
    	&lt;span style=&#34;color:#a6e22e&#34;&gt;expect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;checkPassword&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aerodynamic&amp;#34;&lt;/span&gt;)).&lt;span style=&#34;color:#a6e22e&#34;&gt;toThrow&lt;/span&gt;();
    });
    &lt;span style=&#34;color:#75715e&#34;&gt;// And finally the third one
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;it&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shouldn&amp;#39;t allow only numeric passwords&amp;#34;&lt;/span&gt;, () =&amp;gt; {
    	&lt;span style=&#34;color:#a6e22e&#34;&gt;expect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;checkPassword&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8008135707&amp;#34;&lt;/span&gt;)).&lt;span style=&#34;color:#a6e22e&#34;&gt;toThrow&lt;/span&gt;();
    });
    &lt;span style=&#34;color:#75715e&#34;&gt;// A valid password should be accepted
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;it&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;should return true when a valid password is given&amp;#34;&lt;/span&gt;, () =&amp;gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;expect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;checkPassword&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;g00dP455w0rd!&amp;#34;&lt;/span&gt;)).&lt;span style=&#34;color:#a6e22e&#34;&gt;to&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;equal&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);
    });
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;premier-contact-avec-vuejs&#34;&gt;Premier contact avec Vue.js&lt;/h1&gt;
&lt;h2 id=&#34;quest-ce-que-vuejs&#34;&gt;Qu&amp;rsquo;est-ce que Vue.js&lt;/h2&gt;
&lt;p&gt;Vue.JS est un &lt;strong&gt;framework Web&lt;/strong&gt; qui a √©t√© cr√©e en 2017 par &lt;strong&gt;Evan You&lt;/strong&gt; (ex Googler).&lt;/p&gt;
&lt;p&gt;C&amp;rsquo;est un &lt;strong&gt;logiciel libre&lt;/strong&gt; (license &lt;strong&gt;MIT&lt;/strong&gt;), qui se veut diff√®rer des frameworks front-ends &lt;strong&gt;monolithiques&lt;/strong&gt; comme Angular par le fait qu&amp;rsquo;il se limite &lt;strong&gt;exclusivement √† la d√©finition et l&amp;rsquo;affichage de composants graphiques&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Il est inspir√© du Mod√®le View View-Model (&lt;strong&gt;MVVM&lt;/strong&gt;).&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;pr√©requis-et-installation&#34;&gt;Pr√©requis et installation&lt;/h1&gt;
&lt;p&gt;¬†
Il est n√©cessaire pour utiliser et installer les &lt;strong&gt;outils en ligne de commande de Vue.js&lt;/strong&gt; d&amp;rsquo;avoir &lt;strong&gt;Node.js et npm&lt;/strong&gt; install√©s.&lt;/p&gt;
&lt;p&gt;Une fois ceux-ci configur√©s sur votre machine il faut utiliser la commande&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(sudo) npm install -g @vue/cli&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;¬†
Pour installer l&amp;rsquo;interface en ligne de commande de Vue.js.
Si l&amp;rsquo;installation s&amp;rsquo;est correctement d√©roul√©e vous devriez pouvoir utiliser la commande &lt;strong&gt;vue&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;utilisation-de-vue-cli&#34;&gt;Utilisation de vue-cli&lt;/h1&gt;
&lt;h2 id=&#34;commandes-principales&#34;&gt;Commandes principales&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;create&lt;/strong&gt; [options] app-name - &lt;em&gt;Cr√©er un nouveau projet&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;serve&lt;/strong&gt; [options] (fichier) - &lt;em&gt;Lancer le serveur HTTP d&amp;rsquo;un projet&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;build&lt;/strong&gt; [options] (fichier) - &lt;em&gt;G√©n√©rer un build de production&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;init&lt;/strong&gt; [options] template app-name - &lt;em&gt;Cr√©er un projet √† partir d&amp;rsquo;un des templates de &lt;a href=&#34;https://github.com/vuejs-templates&#34;&gt;https://github.com/vuejs-templates&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ui&lt;/strong&gt; - &lt;em&gt;D√©marre l&amp;rsquo;interface utilisateur de gestion des projets Vue.js&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;le-concept-de-composant&#34;&gt;Le concept de &amp;ldquo;composant&amp;rdquo;&lt;/h1&gt;
&lt;p&gt;Les composants Vue.js s&amp;rsquo;inspirent librement des &lt;a href=&#34;https://www.webcomponents.org/specs&#34;&gt;&lt;strong&gt;sp√©cifications des WebComponents&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pour r√©sumer ce qu&amp;rsquo;est un composant: un composant est un bloc &lt;strong&gt;r√©utilisable&lt;/strong&gt; et &lt;strong&gt;pouvant lui m√™me contenir d&amp;rsquo;autres composants&lt;/strong&gt; associant :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Du style (CSS)&lt;/li&gt;
&lt;li&gt;Un template (HTML)&lt;/li&gt;
&lt;li&gt;De la logique (JavaScript)
¬†&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;L&#39;&lt;strong&gt;int√©r√™t principal&lt;/strong&gt; de l&amp;rsquo;utilisation de composants est &lt;strong&gt;architectural&lt;/strong&gt;, ils permettent d&#39;&lt;strong&gt;√©viter de dupliquer du code&lt;/strong&gt; et d&amp;rsquo;avoir des &lt;strong&gt;templates HTML lisibles&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;mount-et-shallowmount&#34;&gt;Mount et ShallowMount&lt;/h1&gt;
&lt;p&gt;Le module &lt;em&gt;@vue/test-utils&lt;/em&gt; inclut plusieurs classes et m√©thodes qui facilitent les tests unitaires des composants.&lt;/p&gt;
&lt;p&gt;Notamment les fonctions &lt;strong&gt;mount et shallowMount&lt;/strong&gt; qui permettent d&amp;rsquo;instancier un composant √† l&amp;rsquo;int√©rieur d&amp;rsquo;un &lt;strong&gt;wrapper&lt;/strong&gt;, ce qui rend possibles les int√©ractions avec des composants au sein des tests.
¬†&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wrapper&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mount&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;MyComponent&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;assert&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;wrapper&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;MyComponent&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;¬†&lt;/p&gt;
&lt;p&gt;La diff√©rence entre mount et shallowMount est que shallowMount remplace les m√©thodes et composants enfants par des &lt;em&gt;stubs&lt;/em&gt; : des √©l√©ments vides de remplacement.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;les-principales-m√©thodes-de-lobjet-wrapper&#34;&gt;Les principales m√©thodes de l&amp;rsquo;objet Wrapper&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Un wrapper poss√®de plusieurs m√©thodes nous permettant d&amp;rsquo;int√©ragir avec un composant mont√©, voici une liste non exhaustive de celles dont nous nous servirons :&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;vm&lt;/strong&gt; : Contient l&amp;rsquo;instance de l&amp;rsquo;objet Vue cr√©e.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;find(&lt;em&gt;CSSselector&lt;/em&gt;)&lt;/strong&gt;	: Chercher un √©l√©ment par son s√©lecteur&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;findAll(&lt;em&gt;CSSselector&lt;/em&gt;)&lt;/strong&gt; : Chercher plusieurs √©l√©ments&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;setData(&lt;em&gt;data&lt;/em&gt;)&lt;/strong&gt; : Mettre √† jour la &lt;strong&gt;data&lt;/strong&gt; d&amp;rsquo;un composant&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;setProps(&lt;em&gt;props&lt;/em&gt;)&lt;/strong&gt; : Mettre √† jour les &lt;strong&gt;props&lt;/strong&gt; d&amp;rsquo;un composant&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;html()&lt;/strong&gt; : Retourne une cha√Æne de texte contenant la repr√©sentation HTML du composant&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;text()&lt;/strong&gt; : Retourne le texte brut compris dans le composant&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;hands-on&#34;&gt;Hands-on!&lt;/h1&gt;
&lt;p&gt;¬†&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cr√©ation de notre premier projet Vue.js&lt;/li&gt;
&lt;li&gt;Pr√©sentation du projet Message Board&lt;/li&gt;
&lt;li&gt;Sp√©cifications et premi√®res modifications&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;les-principales-options-des-composants&#34;&gt;Les principales options des composants&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt; : Le nom du composant&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;data&lt;/strong&gt; : Une fonction qui retourne les attributs du composant&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;methods&lt;/strong&gt; : Les m√©thodes explicit√©es du composant&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;components&lt;/strong&gt;: Les d√©pendances du composant&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;props&lt;/strong&gt; : Les attributs pass√©s par le composant parent&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;computed&lt;/strong&gt; : Les valeurs √† traiter avant leur affichage&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;la-liaison-de-donn√©es-data-binding&#34;&gt;La liaison de donn√©es (data-binding)&lt;/h1&gt;
&lt;p&gt;Le premier moyen de lier une information entre deux composants est le &lt;strong&gt;data-binding parent vers enfant&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;On envoie une information d&amp;rsquo;un composant &lt;strong&gt;parent&lt;/strong&gt; vers &lt;strong&gt;un autre composant&lt;/strong&gt; qui est utilis√© dans son template (son composant &lt;strong&gt;enfant&lt;/strong&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;&amp;gt;
	&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;enfant&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;enfant&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
export default { name: &amp;#34;Parent&amp;#34; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;¬†&lt;/p&gt;
&lt;h1 id=&#34;utilisation-des-props&#34;&gt;Utilisation des props&lt;/h1&gt;
&lt;p&gt;Pour qu&amp;rsquo;un composant puisse re√ßevoir des informations de ses parents, il est n√©cessaire de d√©finir les attributs qui pourront lui √™tre envoy√©s.&lt;/p&gt;
&lt;p&gt;C&amp;rsquo;est le r√¥le de la m√©ta-donn√©e &amp;ldquo;props&amp;rdquo;: elle contient des d√©finitions de l&amp;rsquo;ensemble des param√®tres qu&amp;rsquo;un composant pourra accepter.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Essayez d&amp;rsquo;√™tre aussi pr√©cis que possible dans la d√©finition de vos props&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;props&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    		&lt;span style=&#34;color:#a6e22e&#34;&gt;author&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    			&lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; String,
        		&lt;span style=&#34;color:#a6e22e&#34;&gt;required&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
        		&lt;span style=&#34;color:#a6e22e&#34;&gt;validator&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; () =&amp;gt; {}
        	}, 
        	&lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; String }}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;la-liaison-de-donn√©es-parent-vers-enfant&#34;&gt;La liaison de donn√©es parent vers enfant&lt;/h1&gt;
&lt;p&gt;Plusieurs mani√®res d&amp;rsquo;afficher de la donn√©e dynamiquement dans le template d&amp;rsquo;un composant
¬†&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;moustaches&lt;/strong&gt; :&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;h1&amp;gt;{{ data }}&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;v-text&lt;/strong&gt; :&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt; &amp;lt;h1 v-text=&amp;quot;data&amp;quot;&amp;gt;&amp;lt;/h1&amp;gt; // n&#39;est pas watch√©e
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;interpolation d&amp;rsquo;expressions dans des moustaches&lt;/strong&gt; :&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;h3&amp;gt;{{ data + new Date() }}&amp;lt;/h3&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&#34;les-slots&#34;&gt;Les slots&lt;/h1&gt;
&lt;p&gt;Il est √©galement possible de faire passer des informations de template d&amp;rsquo;un composant parent vers un composant enfant en utilisant des slots.&lt;/p&gt;
&lt;p&gt;Pour ce faire, on utilise une balise &lt;strong&gt;slot&lt;/strong&gt; dans le composant enfant √† l&amp;rsquo;endroit o√π on souhaite afficher le template pass√© par le parent.&lt;/p&gt;
&lt;p&gt;Dans le composant parent il suffira de mettre un template HTML entre les balises du composant enfant, comme ceci :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;my-component&amp;gt;
	&amp;lt;h1&amp;gt;This will replace the slot in MyComponent&amp;lt;/h1&amp;gt;
&amp;lt;/my-component&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&#34;les-directives&#34;&gt;Les directives&lt;/h1&gt;
&lt;p&gt;Les directives &lt;strong&gt;sont des composants ne comportant pas  de template&lt;/strong&gt;. 
¬†
Elles permettent d&amp;rsquo;associer de la logique √† un √©l√©ment de template &lt;strong&gt;d√©j√† existant&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Il est possible de d√©finir nos propres directives, en cr√©ant un objet Vue.directive (nous y reviendrons) mais il existe d√©j√† un certain nombre de directives &lt;strong&gt;pr√©d√©finies dans le framework&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;les-directives-vuejs-pr√©d√©finies&#34;&gt;Les directives Vue.js pr√©d√©finies&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;v-text&lt;/strong&gt; : Permet de lier une variable au contenu &amp;lsquo;text&amp;rsquo; de l&amp;rsquo;√©l√©ment s√©lectionn√©&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;v-bind ( alias ‚Äò:‚Äô )&lt;/strong&gt; : Permet de lier une variable locale √† un attribut d&amp;rsquo;un √©l√©ment de votre template&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;v-if / v-else-if / v-else&lt;/strong&gt; : Permet d&amp;rsquo;ajouter des conditions √† l&amp;rsquo;ajout d&amp;rsquo;un √©l√©ment dans le DOM&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;v-show&lt;/strong&gt; : Permet d&amp;rsquo;afficher ou non un √©l√©ment (display en CSS) en fonction d&amp;rsquo;une condition&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;v-for&lt;/strong&gt; : Permet d&amp;rsquo;it√©rer sur les √©l√©ments d&amp;rsquo;un tableau&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;v-on&lt;/strong&gt; ( alias ‚Äò@‚Äô ) : Permet de lier un comportement dans notre composant √† un √©v√®nement&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;v-model&lt;/strong&gt; : Permer de lier la valeur d&amp;rsquo;un input utilisateur (input, checkbox, radio, select‚Ä¶) √† une variable de notre composant&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;le-v-on-en-d√©tail&#34;&gt;Le v-on en d√©tail&lt;/h1&gt;
&lt;p&gt;La directive Vue.js v-on (ayant pour alias @) permet d&amp;rsquo;associer un &lt;a href=&#34;https://developer.mozilla.org/fr/docs/Web/Events&#34;&gt;√©v√©nement JavaScript&lt;/a&gt; avec du comportement d√©fini en JavaScript.&lt;/p&gt;
&lt;p&gt;Par exemple pour d√©clencher une fonction au clic sur un bouton on fera comme ceci dans un composant :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v-on:click&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;doSomething()&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; {
  	&lt;span style=&#34;color:#a6e22e&#34;&gt;doSomething&lt;/span&gt;() {
  		&lt;span style=&#34;color:#a6e22e&#34;&gt;alert&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Button clicked&amp;#39;&lt;/span&gt;);
  	}
  };
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;hands-on-1&#34;&gt;Hands-on!&lt;/h1&gt;
&lt;p&gt;¬†&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cr√©ation de donn√©es de Mock&lt;/li&gt;
&lt;li&gt;Cr√©ation de notre composant MessagesList&lt;/li&gt;
&lt;li&gt;Premi√®res int√©ractions entre composants&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;la-liaison-de-donn√©e-enfant-vers-parent&#34;&gt;La liaison de donn√©e enfant vers parent&lt;/h1&gt;
&lt;p&gt;Nous allons maintenant voir comment faire passer une information du composant enfant vers le composant parent.&lt;/p&gt;
&lt;p&gt;Le paradigme est ici l√©g√®rement diff√©rent, on va utiliser le syst√®me d&amp;rsquo;√©v√®nements pour remonter des informations du composant enfant vers le composant parent.&lt;/p&gt;
&lt;p&gt;On d√©clenche notre √©v√®nement dans le composant enfant avec la m√©thode&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;$emit&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Il suffira ensuite d&amp;rsquo;√©couter cet √©v√®nement dans le composant parent avec la directive &lt;strong&gt;v-on&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;parent&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;v-on:hello&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;doSomething()&amp;#34;&lt;/span&gt;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;utilisation-avanc√©e-du-wrapper&#34;&gt;Utilisation avanc√©e du wrapper&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Il est maintenant temps de voir d&amp;rsquo;autres m√©thodes du &lt;strong&gt;wrapper&lt;/strong&gt; qui vont nous servir dans nos prochains tests :&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;contains(&lt;em&gt;selector or component&lt;/em&gt;)&lt;/strong&gt; : Retourne &lt;strong&gt;true&lt;/strong&gt; si un √©l√©ment est contenu dans le composant. Sinon &lt;strong&gt;false&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wrapper.emitted()&lt;/strong&gt; : Retourne un objet contenant les √©v√®nements √©mis par le composant.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wrapper.trigger()&lt;/strong&gt; : Permet de d√©clencher un √©v√®nement dans le &lt;strong&gt;DOM&lt;/strong&gt; de l&amp;rsquo;√©l√©ment s√©lectionn√©.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: wrapper.trigger peut √™tre utilis√© √† la suite d&amp;rsquo;un find(), par exemple :&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;wrapper.find(&#39;button&#39;).trigger(&#39;click&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&#34;le-cycle-de-vie-des-composants&#34;&gt;Le cycle de vie des composants&lt;/h1&gt;
&lt;p&gt;L&#39;&lt;strong&gt;affichage&lt;/strong&gt;, la &lt;strong&gt;mise √† jour&lt;/strong&gt; et la &lt;strong&gt;destruction&lt;/strong&gt; des composants Vue.js sont des actions g√©r√©es par le framework, nous n&amp;rsquo;avons pas √† sp√©cifier lorsqu&amp;rsquo;il faut ajouter ou retirer un composant du DOM.&lt;/p&gt;
&lt;p&gt;En revanche, Vue.js nous permet d&amp;rsquo;effectuer certaines actions √† des moments pr√©cis du cycle de vie de nos composants √† l&amp;rsquo;aide de &lt;strong&gt;crochets (hooks)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Pour les utiliser, il suffit d&amp;rsquo;impl√©menter les m√©thodes √©ponymes √† l&amp;rsquo;int√©rieur de notre composant.&lt;/p&gt;
&lt;p&gt;Les hooks qui nous seront les plus utiles sont :&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Created, Mounted, Updated et Destroyed.&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;sch√©ma-du-cyle-de-vie-dun-composant&#34;&gt;Sch√©ma du cyle de vie d&amp;rsquo;un composant&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://cdnsite1.assist.ro/sites/default/files/styles/big/public/images/blog/Vue-instance-lifecycle-Page-1.png?itok=OdC8TOWx&#34; alt=&#34;lifecycle schema&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;le-concept-de-store&#34;&gt;Le concept de Store&lt;/h1&gt;
&lt;h2 id=&#34;state-management-pattern&#34;&gt;(State Management Pattern)&lt;/h2&gt;
&lt;p&gt;Vue.js utilise &lt;strong&gt;Vuex&lt;/strong&gt; comme syst√®me de gestion d&amp;rsquo;√©tat. 
Vuex est similaire √† Redux dans son fonctionnement en de nombreux points :&lt;/p&gt;
&lt;p&gt;Vuex et Redux permettent de cr√©er des &lt;strong&gt;stores&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Un &lt;strong&gt;store&lt;/strong&gt; sert √† garder un &lt;strong&gt;√©tat (state)&lt;/strong&gt; en m√©moire au sein d&amp;rsquo;une WebApplication.&lt;/p&gt;
&lt;p&gt;Tous nos &lt;strong&gt;composants&lt;/strong&gt; peuvent effectuer des &lt;strong&gt;modifications (mutations)&lt;/strong&gt; sur cet √©tat.&lt;/p&gt;
&lt;p&gt;Les &lt;strong&gt;composants&lt;/strong&gt; peuvent √† tout moment acc√©der √† l&#39;&lt;strong&gt;√©tat&lt;/strong&gt; du store et √™tre &lt;strong&gt;notifi√©s&lt;/strong&gt; en cas de modifications de celui-ci.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;sch√©ma-store-vuex&#34;&gt;Sch√©ma Store Vuex&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://fr.vuejs.org/images/state.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;utilisation-de-vuex&#34;&gt;Utilisation de Vuex&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://vuex.vuejs.org/&#34;&gt;Vuex&lt;/a&gt; est un module s√©par√© du module core de Vue.js.&lt;/p&gt;
&lt;p&gt;Il faut l&amp;rsquo;installer (si ce n&amp;rsquo;est pas d√©j√† fait)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm install vuex &amp;ndash;save&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;et ensuite ajouter le module √† notre projet Vue en ajoutant dans notre main.js :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vuex&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vuex&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Vue&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Vuex&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;¬†
Nous allons maintenant pouvoir cr√©er notre premier &lt;strong&gt;store&lt;/strong&gt;!&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;le-routage&#34;&gt;Le routage&lt;/h1&gt;
&lt;p&gt;Le routeur de Vue.js est un module s√©par√© du module &lt;em&gt;core&lt;/em&gt; Vue.js.&lt;/p&gt;
&lt;p&gt;Une fois qu&amp;rsquo;il est install√© il permet d&amp;rsquo;instancier un objet &lt;strong&gt;Router&lt;/strong&gt;, dont le constructeur prend en param√®tre une liste des routes de notre application sous forme de tableau.&lt;/p&gt;
&lt;p&gt;Chaque route doit au minimum d√©crire un &lt;strong&gt;path&lt;/strong&gt; et y associer un &lt;strong&gt;composant&lt;/strong&gt; ou une &lt;strong&gt;redirection&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Il est d&amp;rsquo;usage d&amp;rsquo;ajouter &lt;strong&gt;un nom&lt;/strong&gt; √† chacune des routes cr√©es.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: On peut utiliser des wildcards (*) sur les &lt;strong&gt;path&lt;/strong&gt; des routes. Ce qui permet par exemple de matcher toutes les routes invalides avec &lt;code&gt;{path: &#39;*&#39;}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;hands-on-2&#34;&gt;Hands-On!&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Cr√©ation d&amp;rsquo;un store et de mutations&lt;/li&gt;
&lt;li&gt;Ajout des parties utilisateur de l&amp;rsquo;application&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;le-mapstate&#34;&gt;Le mapState&lt;/h1&gt;
&lt;p&gt;Maintenant que nous avons un peu plus en main l&amp;rsquo;utilisation de &lt;strong&gt;Vuex&lt;/strong&gt;, nous pouvons aborder les &lt;strong&gt;mapGetters&lt;/strong&gt; et &lt;strong&gt;mapState&lt;/strong&gt; qu&amp;rsquo;il propose.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mapState&lt;/strong&gt; permet de mapper des propri√©t√©s de l&amp;rsquo;√©tat d&amp;rsquo;un store √† une propri√©t√© &lt;em&gt;computed&lt;/em&gt; d&amp;rsquo;un composant.&lt;/p&gt;
&lt;p&gt;Il prend en param√®tre un tableau :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;computed&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mapState&lt;/span&gt;([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;avatar&amp;#39;&lt;/span&gt;, ])
    	&lt;span style=&#34;color:#75715e&#34;&gt;// this.login &amp;amp;&amp;amp; this.avatar
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ou un tableau associatif, permettant de nommer les propri√©t√©s &lt;em&gt;computed&lt;/em&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;computed: mapState({userLogin: &#39;login&#39;, 
userAvatar: &#39;avatar&#39; })
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&#34;le-mapgetters&#34;&gt;Le mapGetters&lt;/h1&gt;
&lt;p&gt;Nous utiliserons en priorit√© le &lt;strong&gt;mapGetters&lt;/strong&gt;, il est conseill√© d&amp;rsquo;utiliser des getters plut√¥t que directement le &lt;strong&gt;state&lt;/strong&gt; d&amp;rsquo;un store !&lt;/p&gt;
&lt;p&gt;Celui-ci fonctionne comme &lt;strong&gt;mapState&lt;/strong&gt; mais associe un &lt;strong&gt;getter&lt;/strong&gt; √† &lt;strong&gt;une propri√©t√© computed&lt;/strong&gt;. 
La syntaxe est aussi quelque peu diff√©rente, on utilisera le &lt;em&gt;spread&lt;/em&gt; d&amp;rsquo;ES6 ici car mapGetters retourne un tableau:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;computed&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {... &lt;span style=&#34;color:#a6e22e&#34;&gt;mapGetters&lt;/span&gt;(
    			[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;getLogin&amp;#39;&lt;/span&gt;, 
                         &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;getAvatar&amp;#39;&lt;/span&gt;]) }
    	&lt;span style=&#34;color:#75715e&#34;&gt;// this.getLogin &amp;amp;&amp;amp; this.getAvatar
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;liaison-de-classes-et-styles&#34;&gt;Liaison de classes et styles&lt;/h1&gt;
&lt;p&gt;Nous avons jusqu&amp;rsquo;ici eu une utilisation relativement classique de la directive v-bind.&lt;/p&gt;
&lt;p&gt;Il est en r√©alit√© √©galement possible de s&amp;rsquo;en servir pour associer du style et des classes √† des propri√©t√©s JavaScript.&lt;/p&gt;
&lt;p&gt;Vue.js permet de g√©rer simplement les modifications de style et de classes √† l&amp;rsquo;aide d&amp;rsquo;objets, plut√¥t que de cha√Ænes de caract√®res.&lt;/p&gt;
&lt;p&gt;Par exemple, pour changer la classe et la couleur du texte d&amp;rsquo;un √©l√©ment en fonction d&amp;rsquo;attributs d&amp;rsquo;un composant :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;:style&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{color: myCustomColor}&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;:class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{selected: isSpanSelected}&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;le-pattern-eventbus&#34;&gt;Le pattern EventBus&lt;/h1&gt;
&lt;p&gt;Jusqu&amp;rsquo;√† pr√©sent nous avons √©mis nos √©v√®nements directement depuis nos composants. 
C&amp;rsquo;est la mani√®re basique d&amp;rsquo;√©crire une gestion d&amp;rsquo;√©v√®nements en Vue.js, nous allons maintenant aborder le pattern &lt;strong&gt;EventBus&lt;/strong&gt; qui propose de centraliser la gestion des √©v√®nements dans un seul composant Vue.js.&lt;/p&gt;
&lt;p&gt;L&amp;rsquo;int√™ret est de faire communiquer facilement des composants sans qu&amp;rsquo;ils aient une relation de parent√©.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vue&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;import eventBus from &#39;@/eventBus&#39;
eventBus.$emit(&#39;refresh&#39;) // Pour l&#39;envoi
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;eventBus&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;$on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;refresh&amp;#39;&lt;/span&gt;, () =&amp;gt; {...}) &lt;span style=&#34;color:#75715e&#34;&gt;// Pour l&amp;#39;√©coute
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;outils-de-d√©bogage&#34;&gt;Outils de D√©bogage&lt;/h1&gt;
&lt;p&gt;Il existe une suite d&amp;rsquo;outils &lt;em&gt;officielle&lt;/em&gt; pour Vue.js : les &lt;strong&gt;Vue DevTools&lt;/strong&gt;, disponibles sous forme d&amp;rsquo;extension &lt;strong&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd&#34;&gt;Chrome&lt;/a&gt;&lt;/strong&gt; et &lt;strong&gt;&lt;a href=&#34;https://addons.mozilla.org/fr/firefox/addon/vue-js-devtools/&#34;&gt;Firefox&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/FoLCsgdXeNyJkiM3uPn6wgbSg_BCfx53XgBHIS5QvhjbRULiFp00eNqkZcUotgasqSm9uh-5LQ=w640-h400-e365&#34; alt=&#34;Vue Devtools&#34;&gt;&lt;/p&gt;
&lt;p&gt;Une fois l&amp;rsquo;extension install√©e, un onglet &lt;strong&gt;Vue&lt;/strong&gt; est disponible dans les outils de d√©veloppement du navigateur.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;axios&#34;&gt;axios&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Axios&lt;/strong&gt; est une biblioth√®que JavaScript pouvant √™tre utilis√©e c√¥t√© client et serveur (en Node.js) et qui permet de faire des requ√™tes r√©seau.
¬†
&lt;strong&gt;Vue.js&lt;/strong&gt; ne prenant pas en charge la gestion des requ√™tes &lt;strong&gt;HTTP&lt;/strong&gt;, nous utiliserons &lt;strong&gt;axios&lt;/strong&gt; pour effectuer nos √©changes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;axios&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;axios&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;axios&lt;/span&gt;
.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://hack.courses&amp;#39;&lt;/span&gt;)
.&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;))
.&lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;les-mixins&#34;&gt;Les mixins&lt;/h1&gt;
&lt;p&gt;Il n&amp;rsquo;est pas n√©cessaire de r√©ecrire 100% du code de vos composants si certaines parties sont similaires.&lt;/p&gt;
&lt;p&gt;Vue.js int√®gre un syst√®me de &lt;strong&gt;mixins&lt;/strong&gt; tr√®s simple √† prendre en main.&lt;/p&gt;
&lt;p&gt;Vous pouvez s√©parer la partie du code que vous souhaitez partager dans une &lt;strong&gt;mixin&lt;/strong&gt; :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;annoyingMixin&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;created&lt;/span&gt;() {
    		&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; created&amp;#39;&lt;/span&gt;);
    	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Il suffit ensuite de l&amp;rsquo;ajouter √† la propri√©t√© &lt;strong&gt;mixins&lt;/strong&gt; d&amp;rsquo;un composant :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export default { mixins: [annoyingMixin] }
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&#34;les-modules-vuex&#34;&gt;Les modules Vuex&lt;/h1&gt;
&lt;p&gt;Jusqu&amp;rsquo;ici nous nous sommes content√©s de mettre toutes les informations et mutations de notre &lt;strong&gt;store&lt;/strong&gt; dans un module unique.&lt;/p&gt;
&lt;p&gt;Notez qu&amp;rsquo;il est √©galement possible de d√©couper un &lt;strong&gt;store Vuex&lt;/strong&gt; en modules, chaque module poss√©dant ses propres &lt;strong&gt;mutations, actions, getters, modules&lt;/strong&gt; et son &lt;strong&gt;√©tat&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;On va d√©finir un module de la sorte :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
	    &lt;span style=&#34;color:#a6e22e&#34;&gt;state&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {...},
	    &lt;span style=&#34;color:#a6e22e&#34;&gt;mutations&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {...},
    	    &lt;span style=&#34;color:#a6e22e&#34;&gt;getters&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {...}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Et l&amp;rsquo;ajouter √† notre store :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;store&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Vuex&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Store&lt;/span&gt;({
	&lt;span style=&#34;color:#a6e22e&#34;&gt;modules&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;module&lt;/span&gt; } &lt;span style=&#34;color:#75715e&#34;&gt;//  =&amp;gt; store.state.a
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;√©criture-de-directives-personnalis√©es&#34;&gt;√âcriture de directives personnalis√©es&lt;/h1&gt;
&lt;p&gt;Nous avons souvent utilis√© les directives pr√©d√©finies de Vue.js, il est √©galement possible de cr√©er nos propres directives personnalis√©es.&lt;/p&gt;
&lt;p&gt;La syntaxe est l√©g√®rement diff√©rente √† la cr√©ation d&amp;rsquo;un composant :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Vue&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;directive&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bold&amp;#39;&lt;/span&gt;, {&lt;span style=&#34;color:#75715e&#34;&gt;/*directive content*/&lt;/span&gt;})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Les directives poss√®dent √©galement un cycle de vie diff√©rent des composants, avec les &lt;strong&gt;hooks&lt;/strong&gt; suivants :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bind(&lt;em&gt;element, bindings&lt;/em&gt;)&lt;/strong&gt; : Appell√© la premi√®re fois qu&amp;rsquo;une directive est li√©e √† un √©l√©ment&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;inserted(&lt;em&gt;element, bindings&lt;/em&gt;)&lt;/strong&gt; : Appell√© quand l&amp;rsquo;√©l√©ment li√© a √©t√© inject√© dans son parent.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;update(&lt;em&gt;element, bindings&lt;/em&gt;)&lt;/strong&gt; : Appell√© apr√®s chaque changement du composant contenant la directive.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;element-et-bindings-&#34;&gt;Element et bindings ?!&lt;/h1&gt;
&lt;p&gt;Ces deux param√®tres sont pass√©s aux &lt;strong&gt;hooks&lt;/strong&gt; des directives Vue.js.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Element&lt;/strong&gt; contient une r√©f√©rence √† l&amp;rsquo;√©l√©ment du &lt;strong&gt;DOM&lt;/strong&gt; sur lequel est appliqu√©e la directive.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bindings&lt;/strong&gt; est un objet plus vaste : il contient plusieurs informations sur la liaison entre notre directive et l&amp;rsquo;√©l√©ment auquel elle est rattach√©e :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt; : le nom de la directive&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt; : la valeur pass√©e √† la directive&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;expression&lt;/strong&gt; : l‚Äôexpression li√©e en tant que chaine de caract√®res&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;arg&lt;/strong&gt; : l‚Äôargument pass√© √† la directive&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;modifiers&lt;/strong&gt; : un objet contenant les modificateurs de la directive&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;filtres&#34;&gt;Filtres&lt;/h1&gt;
&lt;p&gt;Vue.js permet de cr√©er des filtres qui pourront √™tre utilis√©s pour formater des informations avant de les afficher.&lt;/p&gt;
&lt;p&gt;Les filtres s&amp;rsquo;utilisent comme ceci dans un template :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;{{ &lt;span style=&#34;color:#a6e22e&#34;&gt;unixTimeStamp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dateFilter&lt;/span&gt; }}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;La d√©finition d&amp;rsquo;un filtre utilise &lt;strong&gt;Vue.filter&lt;/strong&gt; et utilise une fonction de transformation √† laquelle sera pass√©e la valeur √† filtrer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Vue&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dateFilter&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;moment&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;(
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;websockets&#34;&gt;WebSockets&lt;/h1&gt;
&lt;p&gt;Les &lt;strong&gt;WebSockets&lt;/strong&gt; ont un fonctionnement inspir√© des &lt;strong&gt;sockets&lt;/strong&gt; TCP UNIX.&lt;/p&gt;
&lt;p&gt;Elles sont bas√©es sur le protocole &lt;strong&gt;HTTP&lt;/strong&gt; et permettent d&amp;rsquo;√©tablir une connexion continue entre un client et un serveur.&lt;/p&gt;
&lt;p&gt;Il existe une &lt;strong&gt;API&lt;/strong&gt; JavaScript permettant de cr√©er simplement une WebSocket et d&amp;rsquo;√©couter ses √©v√®nements.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const ws = new WebSocket(url);
ws.onmessage = (message) =&amp;gt; console.log(message);
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&#34;fichier-de-style-global&#34;&gt;Fichier de style global&lt;/h1&gt;
&lt;p&gt;Dans une logique &amp;ldquo;&lt;strong&gt;D&lt;/strong&gt;on&amp;rsquo;t &lt;strong&gt;R&lt;/strong&gt;epeat &lt;strong&gt;Y&lt;/strong&gt;ourself&amp;rdquo;, il est possible gr√¢ce √† WebPack de d√©finir un fichier de style global pour notre application.&lt;/p&gt;
&lt;p&gt;Les modifications de configuration de notre projet Vue.js se feront dans un fichier &lt;strong&gt;vue.config.js&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Pour ajouter un fichier SCSS global, il faudra y ajouter :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;module&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;exports&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;css&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;loaderOptions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;sass&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`@import &amp;#34;@/style/global.scss&amp;#34;;`&lt;/span&gt;
      }}}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ce qui forcera WebPack √† charger le fichier /src/style/global.scss&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Il est √©videmment possible de charger plusieurs fichiers de style&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;les-transitions&#34;&gt;Les transitions&lt;/h1&gt;
&lt;p&gt;Vue.js poss√®de un syst√®me de gestion des transitions d&amp;rsquo;entr√©e et de sortie li√©es au &lt;strong&gt;v-if et v-show&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;La premi√®re √©tape de leur utilisation est de sp√©cifier qu&amp;rsquo;un √©l√©ment n√©cessitera une transition sur son apparition ou sa disparition en utilisant le composant &lt;strong&gt;transition&lt;/strong&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;transition name=&amp;quot;fade-in&amp;quot;&amp;gt;
	&amp;lt;div v-if=&amp;quot;show&amp;quot;&amp;gt;Hello World&amp;lt;/div&amp;gt;
&amp;lt;/transition&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Il va maintenant falloir d√©finir la transition nomm√©e &amp;ldquo;fade-in&amp;rdquo; que nous allons utilis√©e.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Nous avons plusieurs classes √† disposition, qui seront utilis√©es pour d√©finir l&amp;rsquo;√©tat d&amp;rsquo;un √©l√©ment dans sa transition. Ce sont :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;{transition}-enter&lt;/strong&gt; : &lt;em&gt;√âtat de d√©part, avant que l&amp;rsquo;√©l√©ment soit ins√©r√©.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;{transition}-enter-active : &lt;em&gt;√âtat actif appliqu√© pendant toute la phase d&amp;rsquo;animation &lt;strong&gt;enter&lt;/strong&gt;.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;{transition}-enter-to&lt;/strong&gt; : &lt;em&gt;√âtat de fin du enter, vient remplacer le {transition}-enter.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;{transition}-leave&lt;/strong&gt; :  &lt;em&gt;√âtat de d√©part, avant que l&amp;rsquo;√©l√©ment soit retir√©&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;{transition}-leave-active : &lt;em&gt;√âtat actif appliqu√© pendant toute la phrase d&amp;rsquo;animation &lt;strong&gt;leave&lt;/strong&gt;.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;{transition}-leave-to&lt;/strong&gt; : &lt;em&gt;√âtat de fin du leave, vient rempla√ßer le {transition}-leave.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;exemple-de-transition-css-utilisant-les-classes-de-transition&#34;&gt;Exemple de transition CSS utilisant les classes de transition&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;fade-in-enter-to&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;opacity&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
}
.&lt;span style=&#34;color:#a6e22e&#34;&gt;fade-in-enter-active&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; .&lt;span style=&#34;color:#a6e22e&#34;&gt;fade-leave-active&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;transition&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;opacity&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;.5&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;s&lt;/span&gt;;
}
.&lt;span style=&#34;color:#a6e22e&#34;&gt;fade-in-enter&lt;/span&gt; {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;opacity&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;d√©ploiement&#34;&gt;D√©ploiement&lt;/h1&gt;
&lt;p&gt;¬†
Pour d√©ployer votre projet en production, c&amp;rsquo;est tr√®s simple avec Vue.js, il suffit d&amp;rsquo;utiliser le script&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;npm run build&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;¬†
Celui-ci va minifier/compiler l&amp;rsquo;ensemble de vos fichiers pour tout assembler dans un dossier &lt;strong&gt;dist&lt;/strong&gt; contenant votre projet pr√™t √† √™tre d√©ploy√© en production sur votre serveur web!&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
